package com.example.widgets

object WidgetContract {
    const val EXTRA_APPWIDGET_ID = "appWidgetId"
}







package com.example.widgets

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.content.ComponentName
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

class WidgetPickerActivity : AppCompatActivity() {

    private lateinit var mgr: AppWidgetManager
    private lateinit var host: AppWidgetHost
    private lateinit var rv: RecyclerView
    private var pendingId: Int? = null

    private val bindLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            if (res.resultCode == RESULT_OK) {
                pendingId?.let { maybeConfigureOrFinish(it) }
            } else {
                pendingId?.let { host.deleteAppWidgetId(it) }
            }
            pendingId = null
        }

    private val configLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            val id = res.data?.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) ?: -1
            if (res.resultCode == RESULT_OK && id != -1) {
                finishWithOk(id)
            } else if (id != -1) {
                host.deleteAppWidgetId(id)
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        rv = RecyclerView(this).apply {
            layoutManager = LinearLayoutManager(this@WidgetPickerActivity)
        }
        setContentView(rv)

        mgr = AppWidgetManager.getInstance(this)
        host = AppWidgetHost(this, 1024)

        val infos = mgr.installedProviders
        rv.adapter = Adapter(infos)
    }

    private inner class Adapter(private val list: List<AppWidgetProviderInfo>) :
        RecyclerView.Adapter<VH>() {
        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {
            val row = LinearLayout(parent.context).apply {
                orientation = LinearLayout.VERTICAL
                layoutParams =
                    ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)
                setPadding(16, 16, 16, 16)
            }
            val title = TextView(parent.context).apply {
                textSize = 16f
                setPadding(8, 8, 8, 8)
            }
            val holder = FrameLayout(parent.context).apply {
                layoutParams = ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    300
                )
            }
            row.addView(title)
            row.addView(holder)
            return VH(row, title, holder)
        }

        override fun onBindViewHolder(h: VH, pos: Int) {
            val info = list[pos]
            h.title.text = info.loadLabel(packageManager)

            val preview = host.createView(this@WidgetPickerActivity, -1, info)
            h.previewHolder.removeAllViews()
            h.previewHolder.addView(preview)

            // Preview click → provider’s default behavior (launch Chrome / Calendar / etc)
            h.previewHolder.setOnClickListener { /* preserve default provider behavior */ }

            // Label click → add widget to pager
            h.title.isClickable = true
            h.title.setOnClickListener {
                Log.d("WidgetPicker", "LABEL TAP → ${info.provider}")
                allocateAndBindReal(info)
            }
        }

        override fun getItemCount(): Int = list.size
    }

    private class VH(v: View, val title: TextView, val previewHolder: FrameLayout) :
        RecyclerView.ViewHolder(v)

    private fun allocateAndBindReal(info: AppWidgetProviderInfo) {
        val id = host.allocateAppWidgetId()
        val ok = try {
            mgr.bindAppWidgetIdIfAllowed(id, info.provider)
        } catch (_: Throwable) {
            false
        }
        if (ok) {
            Log.d("WidgetPicker", "BIND OK fast id=$id")
            maybeConfigureOrFinish(id)
        } else {
            Log.d("WidgetPicker", "NEEDS PERMISSION → ${info.provider}")
            pendingId = id
            bindLauncher.launch(Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
            })
        }
    }

    private fun maybeConfigureOrFinish(id: Int) {
        val info = mgr.getAppWidgetInfo(id) ?: return finishWithOk(id)
        val cfg: ComponentName? = info.configure
        if (cfg != null) {
            try {
                val act = packageManager.getActivityInfo(cfg, 0)
                if (act.exported) {
                    configLauncher.launch(Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                        component = cfg
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                    })
                    return
                }
            } catch (_: PackageManager.NameNotFoundException) {
            }
        }
        finishWithOk(id)
    }

    private fun finishWithOk(id: Int) {
        Log.d("WidgetPicker", "RESULT_OK id=$id")
        setResult(Activity.RESULT_OK, Intent().putExtra(WidgetContract.EXTRA_APPWIDGET_ID, id))
        finish()
    }
}

















package com.example.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.content.Context
import android.content.Intent
import android.util.AttributeSet
import android.util.Log
import android.view.ViewGroup
import android.widget.FrameLayout
import androidx.activity.result.ActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import java.lang.ref.WeakReference

class WidgetsLayout @JvmOverloads constructor(
    ctx: Context, attrs: AttributeSet? = null
) : FrameLayout(ctx, attrs) {

    private val host = AppWidgetHost(ctx, 1024)
    private val mgr = AppWidgetManager.getInstance(ctx)

    companion object {
        var lastRequester: WeakReference<WidgetsLayout>? = null
    }

    private val pickerLauncher =
        (ctx as AppCompatActivity).registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            handlePickerResult(res)
        }

    fun launchPicker() {
        lastRequester = WeakReference(this)
        pickerLauncher.launch(Intent(context, WidgetPickerActivity::class.java))
    }

    fun handlePickerResult(res: ActivityResult) {
        if (res.resultCode != AppCompatActivity.RESULT_OK || res.data == null) return
        val id = res.data!!.getIntExtra(WidgetContract.EXTRA_APPWIDGET_ID, -1)
        if (id == -1) return
        val info = mgr.getAppWidgetInfo(id) ?: return
        val view = host.createView(context, id, info)
        view.setAppWidget(id, info)
        addView(view, LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT))
        Log.d("WidgetsLayout", "Widget added provider=${info.provider}")
    }

    fun start() = host.startListening()
    fun stop() = host.stopListening()
}























class HomeActivity : AppCompatActivity() {
    private lateinit var widgetsLayout: WidgetsLayout

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        widgetsLayout = WidgetsLayout(this)
        setContentView(widgetsLayout)

        // Button to open picker
        findViewById<Button>(R.id.addWidgetButton).setOnClickListener {
            widgetsLayout.launchPicker()
        }
    }

    override fun onStart() {
        super.onStart()
        widgetsLayout.start()
    }

    override fun onStop() {
        super.onStop()
        widgetsLayout.stop()
    }
}
