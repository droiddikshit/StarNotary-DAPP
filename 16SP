package com.example.knoxfirewall

import android.app.Activity
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import com.samsung.android.knox.EnterpriseDeviceManager
import com.samsung.android.knox.application.ApplicationPolicy
import com.samsung.android.knox.net.firewall.Firewall
import com.samsung.android.knox.net.firewall.FirewallRule
import com.samsung.android.knox.net.firewall.FirewallResponse

class MainActivity : Activity() {

    private val TAG = "KnoxFirewall"

    private lateinit var edm: EnterpriseDeviceManager
    private lateinit var appPolicy: ApplicationPolicy
    private lateinit var firewall: Firewall

    // ✅ Whitelist: only these apps will run
    private val allowedApps = listOf(
        "com.android.chrome",       // Chrome
        "com.whatsapp",             // WhatsApp
        "com.microsoft.teams",      // Teams
        "com.google.android.gm",    // Gmail
        "com.google.android.youtube" // YouTube
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        try {
            // ✅ Knox EDM
            edm = EnterpriseDeviceManager.getInstance(this)

            // ✅ Policies
            appPolicy = edm.applicationPolicy
            firewall = Firewall(this)

            // Enforce only allowed apps
            enforceAllowedApps()

            // Apply firewall rules
            configureFirewallRules()

            Toast.makeText(this, "Knox policies applied", Toast.LENGTH_LONG).show()
        } catch (e: Exception) {
            Log.e(TAG, "Error applying Knox policies", e)
            Toast.makeText(this, "Error: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    /**
     * Only allow apps from whitelist, disable everything else
     */
    private fun enforceAllowedApps() {
        try {
            val pm: PackageManager = packageManager
            val installedApps = pm.getInstalledPackages(0)

            for (pkg in installedApps) {
                val packageName = pkg.packageName

                if (allowedApps.contains(packageName)) {
                    // ✅ Enable allowed apps
                    appPolicy.setApplicationState(packageName, ApplicationPolicy.APP_STATE_ENABLED)
                    Log.d(TAG, "Allowed: $packageName")
                } else {
                    // ❌ Disable all other apps
                    appPolicy.setApplicationState(packageName, ApplicationPolicy.APP_STATE_DISABLED)
                    Log.d(TAG, "Blocked: $packageName")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Failed to enforce app whitelist", e)
        }
    }

    /**
     * Apply some firewall rules
     */
    private fun configureFirewallRules() {
        try {
            val rules = mutableListOf<FirewallRule>()

            // ❌ Block facebook.com in WhatsApp
            val rule1 = FirewallRule().apply {
                applicationPackageName = "com.whatsapp"
                domain = "facebook.com"
                ruleType = FirewallRule.RuleType.SUFFIX
                action = FirewallRule.Action.DENY
            }
            rules.add(rule1)

            // ✅ Only allow example.com in Chrome
            val rule2 = FirewallRule().apply {
                applicationPackageName = "com.android.chrome"
                domain = "example.com"
                ruleType = FirewallRule.RuleType.SUFFIX
                action = FirewallRule.Action.ALLOW
            }
            rules.add(rule2)

            val response: FirewallResponse = firewall.addRules(rules)

            if (response.result == FirewallResponse.RESULT_SUCCESS) {
                Log.d(TAG, "Firewall rules applied successfully")
            } else {
                Log.e(TAG, "Firewall error code = ${response.errorCode}")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Failed to configure firewall rules", e)
        }
    }
}











package com.example.knoxfirewall;

import android.app.Activity;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import com.samsung.android.knox.EnterpriseDeviceManager;
import com.samsung.android.knox.application.ApplicationPolicy;
import com.samsung.android.knox.net.firewall.Firewall;
import com.samsung.android.knox.net.firewall.FirewallRule;
import com.samsung.android.knox.net.firewall.FirewallResponse;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends Activity {

    private static final String TAG = "KnoxFirewall";

    private EnterpriseDeviceManager edm;
    private ApplicationPolicy appPolicy;
    private Firewall firewall;

    // Define your allowed apps here
    private final List<String> allowedApps = new ArrayList<String>() {{
        add("com.android.chrome");      // Chrome
        add("com.whatsapp");            // WhatsApp
        add("com.microsoft.teams");     // Teams
        add("com.google.android.gm");   // Gmail
        add("com.google.android.youtube"); // YouTube
    }};

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        try {
            // ✅ Knox EDM
            edm = EnterpriseDeviceManager.getInstance(this);

            // ✅ Policies
            appPolicy = edm.getApplicationPolicy();
            firewall = new Firewall(this);

            // Enforce only allowed apps
            enforceAllowedApps();

            // Apply firewall rules
            configureFirewallRules();

            Toast.makeText(this, "Knox policies applied", Toast.LENGTH_LONG).show();

        } catch (Exception e) {
            Log.e(TAG, "Error applying Knox policies", e);
            Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }

    /**
     * Enforce whitelist: only allowed apps run, everything else disabled
     */
    private void enforceAllowedApps() {
        try {
            PackageManager pm = getPackageManager();
            List<PackageInfo> installedApps = pm.getInstalledPackages(0);

            for (PackageInfo pkg : installedApps) {
                String packageName = pkg.packageName;

                if (allowedApps.contains(packageName)) {
                    // ✅ Enable allowed apps
                    appPolicy.setApplicationState(packageName, ApplicationPolicy.APP_STATE_ENABLED);
                    Log.d(TAG, "Allowed: " + packageName);
                } else {
                    // ❌ Disable all others
                    appPolicy.setApplicationState(packageName, ApplicationPolicy.APP_STATE_DISABLED);
                    Log.d(TAG, "Blocked: " + packageName);
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "Failed to enforce app whitelist", e);
        }
    }

    /**
     * Apply some firewall rules
     */
    private void configureFirewallRules() {
        try {
            List<FirewallRule> rules = new ArrayList<>();

            // ❌ Block facebook.com inside WhatsApp
            FirewallRule rule1 = new FirewallRule();
            rule1.setApplicationPackageName("com.whatsapp");
            rule1.setDomain("facebook.com");
            rule1.setRuleType(FirewallRule.RuleType.SUFFIX);
            rule1.setAction(FirewallRule.Action.DENY);
            rules.add(rule1);

            // ✅ Only allow example.com in Chrome
            FirewallRule rule2 = new FirewallRule();
            rule2.setApplicationPackageName("com.android.chrome");
            rule2.setDomain("example.com");
            rule2.setRuleType(FirewallRule.RuleType.SUFFIX);
            rule2.setAction(FirewallRule.Action.ALLOW);
            rules.add(rule2);

            FirewallResponse response = firewall.addRules(rules);

            if (response.getResult() == FirewallResponse.RESULT_SUCCESS) {
                Log.d(TAG, "Firewall rules applied successfully");
            } else {
                Log.e(TAG, "Firewall error code = " + response.getErrorCode());
            }

        } catch (Exception e) {
            Log.e(TAG, "Failed to configure firewall rules", e);
        }
    }
}










package com.example.knoxcontrol;

import android.app.Activity;
import android.os.Bundle;
import android.widget.Toast;

import com.samsung.android.knox.EnterpriseDeviceManager;
import com.samsung.android.knox.application.ApplicationPolicy;
import com.samsung.android.knox.net.firewall.DomainFilterRule;
import com.samsung.android.knox.net.firewall.FirewallPolicy;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends Activity {

    private EnterpriseDeviceManager edm;
    private ApplicationPolicy appPolicy;
    private FirewallPolicy firewallPolicy;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        try {
            // ✅ Knox EDM instance
            edm = EnterpriseDeviceManager.getInstance(this);

            // ✅ Get App & Firewall policies
            appPolicy = edm.getApplicationPolicy();
            firewallPolicy = edm.getFirewallPolicy();

            // 1. Control App Execution
            configureAppExecution();

            // 2. Control Web Execution
            configureWebExecution();

            Toast.makeText(this, "Knox Policies Applied!", Toast.LENGTH_LONG).show();

        } catch (Exception e) {
            e.printStackTrace();
            Toast.makeText(this, "Error applying Knox policies: " + e.getMessage(),
                    Toast.LENGTH_LONG).show();
        }
    }

    private void configureAppExecution() {
        // Example packages
        String whatsappPkg = "com.whatsapp";
        String chromePkg = "com.android.chrome";

        // ❌ Block WhatsApp
        appPolicy.setApplicationState(whatsappPkg, ApplicationPolicy.APP_STATE_DISABLED);

        // ✅ Allow Chrome
        appPolicy.setApplicationState(chromePkg, ApplicationPolicy.APP_STATE_ENABLED);

        // ✅ Whitelist only Chrome, block others
        List<String> whitelist = new ArrayList<>();
        whitelist.add(chromePkg);
        appPolicy.addPackagesToWhiteList(whitelist);

        // ❌ Example blacklist
        List<String> blacklist = new ArrayList<>();
        blacklist.add(whatsappPkg);
        appPolicy.addPackagesToBlackList(blacklist);
    }

    private void configureWebExecution() {
        List<DomainFilterRule> rules = new ArrayList<>();

        // Rule 1: Block Facebook inside WhatsApp
        DomainFilterRule rule1 = new DomainFilterRule();
        rule1.setApplicationPackageName("com.whatsapp");
        rule1.setDomain("facebook.com");
        rule1.setRuleType(DomainFilterRule.RuleType.SUFFIX);
        rule1.setAction(DomainFilterRule.Action.DENY);
        rules.add(rule1);

        // Rule 2: Allow only example.com inside Chrome
        DomainFilterRule rule2 = new DomainFilterRule();
        rule2.setApplicationPackageName("com.android.chrome");
        rule2.setDomain("example.com");
        rule2.setRuleType(DomainFilterRule.RuleType.SUFFIX);
        rule2.setAction(DomainFilterRule.Action.ALLOW);
        rules.add(rule2);

        // Apply rules
        firewallPolicy.addDomainFilterRules(rules);
    }
}





<uses-permission android:name="com.samsung.android.knox.permission.KNOX_FIREWALL"/>
<uses-permission android:name="com.samsung.android.knox.permission.KNOX_APP_MGMT"/>
<uses-permission android:name="com.samsung.android.knox.permission.KNOX_CONTAINER"/>








DomainFilterManager dfManager = new DomainFilterManager(this);
dfManager.applyRules();



<uses-permission android:name="com.samsung.android.knox.permission.KNOX_DOMAIN_FILTER" />





import com.samsung.android.knox.EnterpriseDeviceManager;
import com.samsung.android.knox.net.dns.DomainFilterPolicy;
import com.samsung.android.knox.net.dns.DomainFilterRule;

import java.util.ArrayList;
import java.util.List;

public class DomainFilterManager {

    private DomainFilterPolicy domainFilterPolicy;

    public DomainFilterManager(Context context) {
        EnterpriseDeviceManager edm = EnterpriseDeviceManager.getInstance(context);
        domainFilterPolicy = edm.getDomainFilterPolicy();
    }

    public void applyRules() {
        try {
            // Create rule list
            List<DomainFilterRule> rules = new ArrayList<>();

            // Example 1: Block facebook.com
            DomainFilterRule blockFacebook = new DomainFilterRule(
                    "facebook.com",
                    DomainFilterRule.Action.DENY
            );
            rules.add(blockFacebook);

            // Example 2: Allow only example.com
            DomainFilterRule allowExample = new DomainFilterRule(
                    "example.com",
                    DomainFilterRule.Action.ALLOW
            );
            rules.add(allowExample);

            // Apply rules globally (all apps)
            domainFilterPolicy.addDomainFilterRules(rules);

            // Optionally enforce whitelist mode
            domainFilterPolicy.setDomainFilterWhitelistEnable(true);

            Log.d("KnoxDomainFilter", "Domain filter rules applied successfully");

        } catch (SecurityException se) {
            Log.e("KnoxDomainFilter", "SecurityException: " + se.getMessage());
        } catch (Exception e) {
            Log.e("KnoxDomainFilter", "Error: " + e.getMessage());
        }
    }
}







// build.gradle (Project-level)
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.3.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        flatDir { dirs 'libs' } // to load Knox jar/aar
    }
}







plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace "com.example.knoxsample"
    compileSdk 34

    defaultConfig {
        applicationId "com.example.knoxsample"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
}










<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.knoxsample">

    <uses-permission android:name="android.permission.BIND_DEVICE_ADMIN" />

    <!-- Knox permissions -->
    <uses-permission android:name="com.samsung.android.knox.permission.KNOX_APP_MGMT" />
    <uses-permission android:name="com.samsung.android.knox.permission.SUPPORT_PERMISSION" />
    <uses-permission android:name="com.samsung.android.knox.permission.KNOX_LOCKSCREEN" />

    <application
        android:allowBackup="false"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">

        <!-- Device Admin -->
        <receiver
            android:name=".MyDeviceAdminReceiver"
            android:permission="android.permission.BIND_DEVICE_ADMIN"
            android:label="@string/app_name">
            <meta-data
                android:name="android.app.device_admin"
                android:resource="@xml/device_admin_meta" />
            <intent-filter>
                <action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
            </intent-filter>
        </receiver>

        <!-- Knox license receiver -->
        <receiver android:name=".SampleLicenseReceiver">
            <intent-filter>
                <action android:name="com.samsung.android.knox.intent.action.KNOX_LICENSE_STATUS" />
                <action android:name="com.samsung.android.knox.intent.action.LICENSE_STATUS" />
            </intent-filter>
        </receiver>

        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>
</manifest>










<?xml version="1.0" encoding="utf-8"?>
<device-admin xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-policies>
        <limit-password />
        <watch-login />
        <reset-password />
        <force-lock />
        <wipe-data />
    </uses-policies>
</device-admin>









<resources>
    <string name="app_name">Knox Sample</string>
    <string name="activate_admin">ACTIVATE ADMIN</string>
    <string name="activate_license">ACTIVATE LICENSE</string>
    <string name="deactivate_license">DEACTIVATE LICENSE</string>
    <string name="activate_bck">ACTIVATE BACKWARDS COMPATIBLE KEY</string>
    <string name="show_enabled">SHOW ENABLED APPS</string>
    <string name="show_disabled">SHOW DISABLED APPS</string>
    <string name="enable_disabled">ENABLE DISABLED APPS</string>
    <string name="enable_given">ENABLE GIVEN APP</string>
    <string name="disable_given">DISABLE GIVEN APP</string>
    <string name="toggle_whitelist">TOGGLE BATTERY WHITELIST</string>
    <string name="toggle_blacklist">TOGGLE FORCE STOP BLACKLIST</string>
</resources>









<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:orientation="vertical"
        android:padding="16dp"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <Button android:id="@+id/btnAdmin" android:text="@string/activate_admin"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnActivateLicense" android:text="@string/activate_license"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnDeactivateLicense" android:text="@string/deactivate_license"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnActivateBck" android:text="@string/activate_bck"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnShowEnabled" android:text="@string/show_enabled"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnShowDisabled" android:text="@string/show_disabled"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnEnableDisabled" android:text="@string/enable_disabled"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnEnableGiven" android:text="@string/enable_given"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnDisableGiven" android:text="@string/disable_given"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnToggleWhitelist" android:text="@string/toggle_whitelist"
            android:layout_width="match_parent" android:layout_height="wrap_content" />

        <Button android:id="@+id/btnToggleBlacklist" android:text="@string/toggle_blacklist"
            android:layout_width="match_parent" android:layout_height="wrap_content" />
    </LinearLayout>
</ScrollView>









<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:padding="16dp"
    android:layout_width="match_parent" android:layout_height="wrap_content">

    <EditText
        android:id="@+id/inputPackage"
        android:hint="Enter package name"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
</LinearLayout>










package com.example.knoxsample

object Constants {
    const val KPE_KEY = "YOUR-KPE-LICENSE-HERE"
    const val BCK_KEY = "YOUR-BCK-KEY-HERE"
}










package com.example.knoxsample

import android.app.admin.DeviceAdminReceiver
import android.content.Context
import android.content.Intent
import android.widget.Toast

class MyDeviceAdminReceiver : DeviceAdminReceiver() {
    override fun onEnabled(context: Context, intent: Intent) {
        Toast.makeText(context, "Admin enabled", Toast.LENGTH_SHORT).show()
    }
    override fun onDisabled(context: Context, intent: Intent) {
        Toast.makeText(context, "Admin disabled", Toast.LENGTH_SHORT).show()
    }
}









package com.example.knoxsample

import android.app.Activity
import android.app.admin.DevicePolicyManager
import android.content.ComponentName
import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    private lateinit var compName: ComponentName
    private lateinit var licenseActivator: LicenseActivator
    private lateinit var appManager: AppManagerService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        compName = ComponentName(this, MyDeviceAdminReceiver::class.java)
        licenseActivator = LicenseActivator(this)
        appManager = AppManagerService(this)

        findViewById<Button>(R.id.btnAdmin).setOnClickListener {
            val intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN)
            intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, compName)
            startActivityForResult(intent, 100)
        }

        findViewById<Button>(R.id.btnActivateLicense).setOnClickListener {
            licenseActivator.activateKpe()
        }

        findViewById<Button>(R.id.btnDeactivateLicense).setOnClickListener {
            licenseActivator.deactivateKpe()
        }

        findViewById<Button>(R.id.btnActivateBck).setOnClickListener {
            licenseActivator.activateBck()
        }

        findViewById<Button>(R.id.btnShowEnabled).setOnClickListener {
            val list = appManager.showAppState(true)
            toast("Enabled apps:\n${list.joinToString("\n")}")
        }

        findViewById<Button>(R.id.btnShowDisabled).setOnClickListener {
            val list = appManager.showAppState(false)
            toast("Disabled apps:\n${list.joinToString("\n")}")
        }

        findViewById<Button>(R.id.btnEnableDisabled).setOnClickListener {
            val list = appManager.enableAllDisabled()
            toast("Enabled: ${list.size} apps")
        }

        findViewById<Button>(R.id.btnEnableGiven).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.enablePackage(pkg)
                toast("Enable $pkg: $res")
            }
        }

        findViewById<Button>(R.id.btnDisableGiven).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.disablePackage(pkg)
                toast("Disable $pkg: $res")
            }
        }

        findViewById<Button>(R.id.btnToggleWhitelist).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.toggleBatteryOptimizationWhitelist(pkg)
                toast("Whitelist toggled: $res")
            }
        }

        findViewById<Button>(R.id.btnToggleBlacklist).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.toggleForceStopBlacklist(pkg)
                toast("Blacklist toggled: $res")
            }
        }
    }

    private fun promptPackage(onOk: (String) -> Unit) {
        val view = layoutInflater.inflate(R.layout.prompt_package, null)
        val input = view.findViewById<EditText>(R.id.inputPackage)
        AlertDialog.Builder(this)
            .setTitle("Package Name")
            .setView(view)
            .setPositiveButton("OK") { _, _ ->
                val pkg = input.text.toString().trim()
                if (pkg.isNotEmpty()) onOk(pkg)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun toast(msg: String) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show()
    }
}





package com.example.knoxsample

import android.app.Activity
import android.app.admin.DevicePolicyManager
import android.content.ComponentName
import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    private lateinit var compName: ComponentName
    private lateinit var licenseActivator: LicenseActivator
    private lateinit var appManager: AppManagerService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        compName = ComponentName(this, MyDeviceAdminReceiver::class.java)
        licenseActivator = LicenseActivator(this)
        appManager = AppManagerService(this)

        findViewById<Button>(R.id.btnAdmin).setOnClickListener {
            val intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN)
            intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, compName)
            startActivityForResult(intent, 100)
        }

        findViewById<Button>(R.id.btnActivateLicense).setOnClickListener {
            licenseActivator.activateKpe()
        }

        findViewById<Button>(R.id.btnDeactivateLicense).setOnClickListener {
            licenseActivator.deactivateKpe()
        }

        findViewById<Button>(R.id.btnActivateBck).setOnClickListener {
            licenseActivator.activateBck()
        }

        findViewById<Button>(R.id.btnShowEnabled).setOnClickListener {
            val list = appManager.showAppState(true)
            toast("Enabled apps:\n${list.joinToString("\n")}")
        }

        findViewById<Button>(R.id.btnShowDisabled).setOnClickListener {
            val list = appManager.showAppState(false)
            toast("Disabled apps:\n${list.joinToString("\n")}")
        }

        findViewById<Button>(R.id.btnEnableDisabled).setOnClickListener {
            val list = appManager.enableAllDisabled()
            toast("Enabled: ${list.size} apps")
        }

        findViewById<Button>(R.id.btnEnableGiven).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.enablePackage(pkg)
                toast("Enable $pkg: $res")
            }
        }

        findViewById<Button>(R.id.btnDisableGiven).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.disablePackage(pkg)
                toast("Disable $pkg: $res")
            }
        }

        findViewById<Button>(R.id.btnToggleWhitelist).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.toggleBatteryOptimizationWhitelist(pkg)
                toast("Whitelist toggled: $res")
            }
        }

        findViewById<Button>(R.id.btnToggleBlacklist).setOnClickListener {
            promptPackage { pkg ->
                val res = appManager.toggleForceStopBlacklist(pkg)
                toast("Blacklist toggled: $res")
            }
        }
    }

    private fun promptPackage(onOk: (String) -> Unit) {
        val view = layoutInflater.inflate(R.layout.prompt_package, null)
        val input = view.findViewById<EditText>(R.id.inputPackage)
        AlertDialog.Builder(this)
            .setTitle("Package Name")
            .setView(view)
            .setPositiveButton("OK") { _, _ ->
                val pkg = input.text.toString().trim()
                if (pkg.isNotEmpty()) onOk(pkg)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun toast(msg: String) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show()
    }
}











package com.test.testtt

import android.content.Context
import com.samsung.android.knox.license.KnoxEnterpriseLicenseManager

class LicenseActivator(private val context: Context) {

    fun activateKpe() {
        val klm = KnoxEnterpriseLicenseManager.getInstance(context)
        klm.activateLicense(Constants.KPE_KEY, context.packageName)
    }

    fun deactivateKpe() {
        val klm = KnoxEnterpriseLicenseManager.getInstance(context)
        klm.deactivateLicense(Constants.KPE_KEY, context.packageName)
    }

    fun activateBck() {
        val klm = KnoxEnterpriseLicenseManager.getInstance(context)
        klm.activateLicense(Constants.BCK_KEY, context.packageName)
    }
}









package com.test.testtt

import android.content.Context
import com.samsung.android.knox.EnterpriseDeviceManager
import com.samsung.android.knox.application.ApplicationPolicy

class AppManagerService(private val context: Context) {

    private val edm: EnterpriseDeviceManager = EnterpriseDeviceManager.getInstance(context)
    private val appPolicy: ApplicationPolicy = edm.applicationPolicy

    fun showAppState(enabled: Boolean): List<String> {
        return if (enabled) {
            appPolicy.listPackages(ApplicationPolicy.FILTER_ENABLED_APPS) ?: emptyList()
        } else {
            appPolicy.listPackages(ApplicationPolicy.FILTER_DISABLED_APPS) ?: emptyList()
        }
    }

    fun enableAllDisabled(): List<String> {
        val disabled = showAppState(false)
        for (pkg in disabled) {
            appPolicy.setApplicationState(pkg, true)
        }
        return disabled
    }

    fun enablePackage(pkg: String): Boolean {
        return appPolicy.setApplicationState(pkg, true)
    }

    fun disablePackage(pkg: String): Boolean {
        return appPolicy.setApplicationState(pkg, false)
    }

    fun toggleBatteryOptimizationWhitelist(pkg: String): Boolean {
        val current = appPolicy.isPackageInBatteryOptimizationWhitelist(pkg)
        return if (current) {
            appPolicy.removePackageFromBatteryOptimizationWhitelist(pkg)
        } else {
            appPolicy.addPackageToBatteryOptimizationWhitelist(pkg)
        }
    }

    fun toggleForceStopBlacklist(pkg: String): Boolean {
        val current = appPolicy.isForceStopBlacklisted(pkg)
        return if (current) {
            appPolicy.removePackageFromForceStopBlacklist(pkg)
        } else {
            appPolicy.addPackageToForceStopBlacklist(pkg)
        }
    }
}





package com.test.testtt

import android.content.Context
import com.samsung.android.knox.EnterpriseDeviceManager
import com.samsung.android.knox.application.ApplicationPolicy

class AppManagerService(private val context: Context) {

    private val edm: EnterpriseDeviceManager = EnterpriseDeviceManager.getInstance(context)
    private val appPolicy: ApplicationPolicy = edm.applicationPolicy

    fun showAppState(enabled: Boolean): List<String> {
        return if (enabled) {
            appPolicy.listPackages(ApplicationPolicy.FILTER_ENABLED_APPS) ?: emptyList()
        } else {
            appPolicy.listPackages(ApplicationPolicy.FILTER_DISABLED_APPS) ?: emptyList()
        }
    }

    fun enableAllDisabled(): List<String> {
        val disabled = showAppState(false)
        for (pkg in disabled) {
            appPolicy.setApplicationState(pkg, true)
        }
        return disabled
    }

    fun enablePackage(pkg: String): Boolean {
        return appPolicy.setApplicationState(pkg, true)
    }

    fun disablePackage(pkg: String): Boolean {
        return appPolicy.setApplicationState(pkg, false)
    }

    fun toggleBatteryOptimizationWhitelist(pkg: String): Boolean {
        val current = appPolicy.isPackageInBatteryOptimizationWhitelist(pkg)
        return if (current) {
            appPolicy.removePackageFromBatteryOptimizationWhitelist(pkg)
        } else {
            appPolicy.addPackageToBatteryOptimizationWhitelist(pkg)
        }
    }

    fun toggleForceStopBlacklist(pkg: String): Boolean {
        val current = appPolicy.isForceStopBlacklisted(pkg)
        return if (current) {
            appPolicy.removePackageFromForceStopBlacklist(pkg)
        } else {
            appPolicy.addPackageToForceStopBlacklist(pkg)
        }
    }
}









