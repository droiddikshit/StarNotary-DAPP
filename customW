📁 app/
 ┣ 📁 java/com/yourapp/
 ┃ ┣ 📄 MainActivity.kt
 ┃ ┣ 📄 WidgetPickerAdapter.kt
 ┃ ┗ 📄 WidgetUtils.kt
 ┣ 📁 res/
 ┃ ┣ 📁 layout/
 ┃ ┃ ┣ 📄 activity_main.xml
 ┃ ┃ ┗ 📄 item_widget_preview.xml
 ┃ ┣ 📁 drawable/
 ┃ ┣ 📁 mipmap/
 ┃ ┗ 📄 AndroidManifest.xml




<uses-permission android:name="android.permission.BIND_APPWIDGET" />

<application
    android:label="Custom Widget Picker"
    android:icon="@mipmap/ic_launcher"
    android:allowBackup="true"
    android:usesCleartextTraffic="true"
    android:supportsRtl="true"
    android:theme="@style/Theme.AppCompat.Light.NoActionBar">

    <activity android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.intent.action.MAIN"/>
            <category android:name="android.intent.category.LAUNCHER"/>
        </intent-filter>
    </activity>
</application>



Great. Here's a full structure for an Android project using XML views (let me know if you're using Jetpack Compose instead) that:

Displays all available widgets with previews in a RecyclerView

Lets the user select a widget

Automatically binds and places it in a container inside the activity



---

✅ Project Structure

📁 app/
 ┣ 📁 java/com/yourapp/
 ┃ ┣ 📄 MainActivity.kt
 ┃ ┣ 📄 WidgetPickerAdapter.kt
 ┃ ┗ 📄 WidgetUtils.kt
 ┣ 📁 res/
 ┃ ┣ 📁 layout/
 ┃ ┃ ┣ 📄 activity_main.xml
 ┃ ┃ ┗ 📄 item_widget_preview.xml
 ┃ ┣ 📁 drawable/
 ┃ ┣ 📁 mipmap/
 ┃ ┗ 📄 AndroidManifest.xml


---

✅ AndroidManifest.xml

Add required permissions:

<uses-permission android:name="android.permission.BIND_APPWIDGET" />

<application
    android:label="Custom Widget Picker"
    android:icon="@mipmap/ic_launcher"
    android:allowBackup="true"
    android:usesCleartextTraffic="true"
    android:supportsRtl="true"
    android:theme="@style/Theme.AppCompat.Light.NoActionBar">

    <activity android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.intent.action.MAIN"/>
            <category android:name="android.intent.category.LAUNCHER"/>
        </intent-filter>
    </activity>
</application>


---

✅ activity_main.xml

<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rootLayout"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/widgetRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:padding="8dp"/>

    <FrameLayout
        android:id="@+id/widgetContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="#E0E0E0"/>
</LinearLayout>


---

✅ item_widget_preview.xml

<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:padding="8dp"
    android:orientation="vertical">

    <ImageView
        android:id="@+id/previewImage"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:scaleType="centerInside"
        android:background="#CCC"/>

    <TextView
        android:id="@+id/widgetLabel"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="12sp"
        android:layout_marginTop="4dp"/>
</LinearLayout>


---

✅ WidgetUtils.kt

fun getWidgetPreviewBitmap(context: Context, info: AppWidgetProviderInfo): Bitmap? {
    return try {
        AppWidgetManager.getInstance(context).loadPreview(info, -1)
            ?: AppWidgetManager.getInstance(context).loadIcon(info).toBitmap()
    } catch (e: Exception) {
        null
    }
}


---

✅ WidgetPickerAdapter.kt

class WidgetPickerAdapter(
    private val context: Context,
    private val widgets: List<AppWidgetProviderInfo>,
    private val onClick: (AppWidgetProviderInfo) -> Unit
) : RecyclerView.Adapter<WidgetPickerAdapter.WidgetViewHolder>() {

    inner class WidgetViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val preview: ImageView = view.findViewById(R.id.previewImage)
        val label: TextView = view.findViewById(R.id.widgetLabel)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WidgetViewHolder {
        val view = LayoutInflater.from(context).inflate(R.layout.item_widget_preview, parent, false)
        return WidgetViewHolder(view)
    }

    override fun onBindViewHolder(holder: WidgetViewHolder, position: Int) {
        val widget = widgets[position]
        holder.label.text = widget.label

        holder.preview.setImageBitmap(getWidgetPreviewBitmap(context, widget))

        holder.itemView.setOnClickListener { onClick(widget) }
    }

    override fun getItemCount() = widgets.size
}


---

✅ MainActivity.kt

class MainActivity : AppCompatActivity() {

    private lateinit var widgetHost: AppWidgetHost
    private lateinit var widgetManager: AppWidgetManager

    private val BIND_REQUEST = 101
    private var pendingAppWidgetId = 0
    private lateinit var pendingInfo: AppWidgetProviderInfo

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        widgetManager = AppWidgetManager.getInstance(this)
        widgetHost = AppWidgetHost(this, 1024)
        widgetHost.startListening()

        val recycler = findViewById<RecyclerView>(R.id.widgetRecyclerView)
        recycler.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)

        val widgets = widgetManager.installedProviders
        recycler.adapter = WidgetPickerAdapter(this, widgets) { info ->
            val widgetId = widgetHost.allocateAppWidgetId()
            if (widgetManager.bindAppWidgetIdIfAllowed(widgetId, info.provider)) {
                bindWidget(widgetId, info)
            } else {
                val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                }
                pendingAppWidgetId = widgetId
                pendingInfo = info
                startActivityForResult(intent, BIND_REQUEST)
            }
        }
    }

    private fun bindWidget(appWidgetId: Int, info: AppWidgetProviderInfo) {
        val hostView = widgetHost.createView(this, appWidgetId, info)
        hostView.setAppWidget(appWidgetId, info)
        hostView.layoutParams = FrameLayout.LayoutParams(info.minWidth, info.minHeight)

        findViewById<FrameLayout>(R.id.widgetContainer).apply {
            removeAllViews()
            addView(hostView)
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        if (requestCode == BIND_REQUEST && resultCode == RESULT_OK) {
            bindWidget(pendingAppWidgetId, pendingInfo)
        }
        super.onActivityResult(requestCode, resultCode, data)
    }
}


---

✅ Optional Enhancements

Persist added widget list in SharedPreferences or Room.

Add drag/drop functionality.

Allow user to resize widgets using AppWidgetHostView.updateAppWidgetSize().



---

Would you li

<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rootLayout"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/widgetRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:padding="8dp"/>

    <FrameLayout
        android:id="@+id/widgetContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="#E0E0E0"/>
</LinearLayout>



