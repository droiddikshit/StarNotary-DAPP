package your.package.name

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.AttributeSet
import android.view.LayoutInflater
import android.widget.FrameLayout
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import your.package.name.databinding.LayoutWidgetsBinding
import kotlin.math.max

class WidgetsLayout @JvmOverloads constructor(
    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0
) : FrameLayout(context, attrs, defStyleAttr), DefaultLifecycleObserver {

    companion object { private const val HOST_ID = 1024 }

    private val vb = LayoutWidgetsBinding.inflate(LayoutInflater.from(context), this, true)

    private val canvas: FrameLayout  get() = vb.widgetsLayoutContainer
    private val addBtn: ImageButton  get() = vb.addWidgetButton
    private val deleteZone: ImageView get() = vb.deleteZone

    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: AppWidgetHost

    // provided by Activity (no register here!)
    private var bindLauncher: ActivityResultLauncher<Intent>? = null
    private var hostActivity: Activity? = null

    private var pendingWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID
    private var pendingProvider: AppWidgetProviderInfo? = null

    /** Called by container when this page view is actually attached. */
    fun attachToLifecycle(owner: LifecycleOwner) {
        owner.lifecycle.addObserver(this)
        appWidgetManager = AppWidgetManager.getInstance(context.applicationContext)
        appWidgetHost = AppWidgetHost(context.applicationContext, HOST_ID)
    }

    /** Called by container once (uses the pre-registered launcher from Activity). */
    fun setBindLauncher(launcher: ActivityResultLauncher<Intent>, activity: Activity) {
        bindLauncher = launcher
        hostActivity = activity
        addBtn.setOnClickListener { openPicker() }
    }

    // Lifecycle from Activity/Fragment
    override fun onStart(owner: LifecycleOwner) { appWidgetHost.startListening() }
    override fun onStop(owner: LifecycleOwner)  { appWidgetHost.stopListening()  }

    private fun openPicker() {
        val act = hostActivity ?: return
        WidgetPickerBottomSheet(
            context = act,
            appWidgetManager = appWidgetManager,
            appWidgetHost = appWidgetHost
        ) { provider, widgetId ->
            // silent bind first
            if (!appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)) {
                pendingWidgetId = widgetId
                pendingProvider = provider
                val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, provider.provider)
                }
                bindLauncher?.launch(intent) // uses Activity's launcher registered in onCreate()
            } else {
                placeWidget(provider, widgetId)
            }
        }.show()
    }

    /** Forwarded from Activityâ€™s launcher callback. */
    fun onBindActivityResult(resultCode: Int, data: Intent?) {
        if (resultCode != Activity.RESULT_OK) { clearPending(); return }
        val id = data?.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, pendingWidgetId)
            ?: pendingWidgetId
        val info = appWidgetManager.getAppWidgetInfo(id) ?: pendingProvider
        if (info != null && id != AppWidgetManager.INVALID_APPWIDGET_ID) {
            placeWidget(info, id)
        } else {
            toast("Bind result invalid")
        }
        clearPending()
    }

    private fun clearPending() {
        pendingWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID
        pendingProvider = null
    }

    private fun placeWidget(info: AppWidgetProviderInfo, id: Int) {
        val minWdp = max(60, info.minWidth)    // values are in DP
        val minHdp = max(60, info.minHeight)

        val hv: AppWidgetHostView = appWidgetHost.createView(context, id, info).apply {
            setAppWidget(id, info)
            updateAppWidgetSize(Bundle(), minWdp, minHdp, minWdp, minHdp)
            layoutParams = LayoutParams(dp(200f), dp(200f))
        }
        canvas.addView(hv)
        addBtn.bringToFront()
    }

    private fun dp(v: Float) = (v * resources.displayMetrics.density).toInt()
    private fun toast(s: String) = Toast.makeText(context, s, Toast.LENGTH_SHORT).show()
}