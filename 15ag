package your.package.name

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.AttributeSet
import android.view.LayoutInflater
import android.view.View
import android.widget.FrameLayout
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import your.package.name.databinding.LayoutWidgetsBinding
import kotlin.math.max

class WidgetsLayout @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : FrameLayout(context, attrs, defStyleAttr) {

    companion object { private const val HOST_ID = 1024 }

    private val vb = LayoutWidgetsBinding.inflate(LayoutInflater.from(context), this, true)

    private val canvas: FrameLayout  get() = vb.widgetsLayoutContainer
    private val addBtn: ImageButton  get() = vb.addWidgetButton
    private val deleteZone: ImageView get() = vb.deleteZone

    // Initialize once in constructor -> no lateinit race
    private val appWidgetManager: AppWidgetManager =
        AppWidgetManager.getInstance(context.applicationContext)
    private val appWidgetHost: AppWidgetHost =
        AppWidgetHost(context.applicationContext, HOST_ID)

    // Provided by Activity (registered in Activity.onCreate)
    private var bindLauncher: ActivityResultLauncher<Intent>? = null
    private var hostActivity: Activity? = null

    // ---- Activity wires this once ----
    fun setBindLauncher(launcher: ActivityResultLauncher<Intent>, activity: Activity) {
        bindLauncher = launcher
        hostActivity = activity
        addBtn.setOnClickListener { openPicker() }
    }

    // ---- Let the View control listening via attach/detach (no lifecycle observer) ----
    override fun onAttachedToWindow() {
        super.onAttachedToWindow()
        appWidgetHost.startListening()
    }

    override fun onDetachedFromWindow() {
        super.onDetachedFromWindow()
        appWidgetHost.stopListening()
    }

    // ---- Picker & placement ----
    private fun openPicker() {
        val act = hostActivity ?: return
        WidgetPickerBottomSheet(
            context = act,
            appWidgetManager = appWidgetManager,
            appWidgetHost = appWidgetHost
        ) { provider, widgetId ->
            // try silent bind; else request permission using Activityâ€™s pre-registered launcher
            if (!appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)) {
                val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, provider.provider)
                }
                bindLauncher?.launch(intent)
            } else {
                placeWidget(provider, widgetId)
            }
        }.show()
    }

    /** Call this from your ActivityResult callback. */
    fun onBindActivityResult(resultCode: Int, data: Intent?) {
        if (resultCode != Activity.RESULT_OK || data == null) return
        val id = data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)
        if (id == AppWidgetManager.INVALID_APPWIDGET_ID) return
        val info = appWidgetManager.getAppWidgetInfo(id) ?: return
        placeWidget(info, id)
    }

    private fun placeWidget(info: AppWidgetProviderInfo, id: Int) {
        val minWdp = max(60, info.minWidth)   // DP (AppWidgetProviderInfo uses dp)
        val minHdp = max(60, info.minHeight)

        val hv: AppWidgetHostView = appWidgetHost.createView(context, id, info).apply {
            setAppWidget(id, info)
            updateAppWidgetSize(Bundle(), minWdp, minHdp, minWdp, minHdp)
            layoutParams = LayoutParams(dp(200f), dp(200f))
        }
        canvas.addView(hv)
        addBtn.bringToFront()
    }

    private fun dp(v: Float) = (v * resources.displayMetrics.density).toInt()
    private fun toast(s: String) = Toast.makeText(context, s, Toast.LENGTH_SHORT).show()
}






package your.package.name

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.drawable.Drawable
import android.os.Build
import android.os.Bundle
import android.view.Gravity
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.TextView
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlin.math.roundToInt

class WidgetPickerBottomSheet(
    private val context: Context,
    private val appWidgetManager: AppWidgetManager,
    private val appWidgetHost: AppWidgetHost,
    private val onWidgetSelected: (AppWidgetProviderInfo, Int) -> Unit
) {
    fun show() {
        val sheet = BottomSheetDialog(context)
        val rv = RecyclerView(context).apply {
            layoutManager = GridLayoutManager(context, 2)
            setHasFixedSize(true)
        }
        val providers = appWidgetManager.installedProviders

        rv.adapter = object : RecyclerView.Adapter<VH>() {
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {
                val root = FrameLayout(parent.context).apply {
                    layoutParams = ViewGroup.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        dp(parent.context, 200f)
                    )
                    isClickable = true; isFocusable = true
                }
                return VH(root)
            }
            override fun onBindViewHolder(h: VH, pos: Int) {
                h.bind(providers[pos]) { p, id -> onWidgetSelected(p, id); sheet.dismiss() }
            }
            override fun getItemCount() = providers.size
            override fun onViewAttachedToWindow(h: VH) = h.attach(appWidgetHost, appWidgetManager)
            override fun onViewDetachedFromWindow(h: VH) = h.detach(appWidgetHost)
            override fun onViewRecycled(h: VH) { h.detach(appWidgetHost); super.onViewRecycled(h) }
        }

        sheet.setContentView(rv)
        sheet.show()
    }

    private inner class VH(val root: FrameLayout) : RecyclerView.ViewHolder(root) {
        private var provider: AppWidgetProviderInfo? = null
        private var widgetId: Int = AppWidgetManager.INVALID_APPWIDGET_ID
        private var consumedByPick = false

        fun bind(p: AppWidgetProviderInfo, onPick: (AppWidgetProviderInfo, Int) -> Unit) {
            provider = p; consumedByPick = false; root.removeAllViews()

            root.addView(TextView(root.context).apply {
                text = p.loadLabel(root.context.packageManager)
                layoutParams = FrameLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT,
                    Gravity.START or Gravity.TOP
                ).apply { topMargin = dp(root.context, 8f) }
            })

            root.addView(FrameLayout(root.context).apply {
                val side = dp(root.context, 164f)
                layoutParams = FrameLayout.LayoutParams(side, side, Gravity.CENTER).apply {
                    topMargin = dp(root.context, 24f)
                }
                setBackgroundColor(0xFF333333.toInt())
            })

            root.setOnClickListener {
                val prov = provider ?: return@setOnClickListener
                if (widgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {
                    widgetId = appWidgetHost.allocateAppWidgetId()
                }
                appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, prov.provider) // try silently
                consumedByPick = true
                onPick(prov, widgetId)
            }
        }

        fun attach(host: AppWidgetHost, mgr: AppWidgetManager) {
            val p = provider ?: return
            if (widgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {
                widgetId = host.allocateAppWidgetId()
            }
            root.post {
                while (root.childCount > 1) root.removeViewAt(1)
                val bound = mgr.bindAppWidgetIdIfAllowed(widgetId, p.provider)
                if (bound && p.configure == null) {
                    val hv = host.createView(root.context, widgetId, p).apply {
                        setAppWidget(widgetId, p)
                        val wdp = maxOf(60, p.minWidth)
                        val hdp = maxOf(60, p.minHeight)
                        updateAppWidgetSize(Bundle(), wdp, hdp, wdp, hdp)
                        layoutParams = FrameLayout.LayoutParams(
                            dp(root.context, 164f), dp(root.context, 164f), Gravity.CENTER
                        ).apply { topMargin = dp(root.context, 24f) }
                    }
                    root.addView(hv)
                } else {
                    root.addView(staticPreview(root.context, p))
                }
            }
        }

        fun detach(host: AppWidgetHost) {
            while (root.childCount > 1) root.removeViewAt(1)
            if (!consumedByPick && widgetId != AppWidgetManager.INVALID_APPWIDGET_ID) {
                host.deleteAppWidgetId(widgetId)
                widgetId = AppWidgetManager.INVALID_APPWIDGET_ID
            }
        }

        private fun staticPreview(ctx: Context, p: AppWidgetProviderInfo): ImageView {
            val iv = ImageView(ctx).apply {
                scaleType = ImageView.ScaleType.CENTER_CROP
                layoutParams = FrameLayout.LayoutParams(
                    dp(ctx, 164f), dp(ctx, 164f), Gravity.CENTER
                ).apply { topMargin = dp(ctx, 24f) }
                setBackgroundColor(0xFF333333.toInt())
            }
            val d: Drawable? = try { p.loadPreviewImage(ctx, 0) } catch (_: Throwable) { null }
            if (d != null) { iv.setImageDrawable(d); return iv }
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                val layoutId = p.previewLayout
                if (layoutId != 0) {
                    try {
                        val pkgCtx = ctx.createPackageContext(p.provider.packageName, 0)
                        val v = LayoutInflater.from(pkgCtx).inflate(layoutId, null)
                        val s = dp(ctx, 164f)
                        v.measure(
                            View.MeasureSpec.makeMeasureSpec(s, View.MeasureSpec.EXACTLY),
                            View.MeasureSpec.makeMeasureSpec(s, View.MeasureSpec.EXACTLY)
                        )
                        v.layout(0, 0, s, s)
                        val bmp = Bitmap.createBitmap(s, s, Bitmap.Config.ARGB_8888)
                        val c = Canvas(bmp); v.draw(c)
                        iv.setImageBitmap(bmp); return iv
                    } catch (_: PackageManager.NameNotFoundException) {}
                    catch (_: Throwable) {}
                }
            }
            return iv
        }
    }

    private fun dp(ctx: Context, v: Float) = (v * ctx.resources.displayMetrics.density).roundToInt()
}









package your.package.name

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.AttributeSet
import android.view.LayoutInflater
import android.widget.FrameLayout
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import your.package.name.databinding.LayoutWidgetsBinding
import kotlin.math.max

class WidgetsLayout @JvmOverloads constructor(
    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0
) : FrameLayout(context, attrs, defStyleAttr), DefaultLifecycleObserver {

    companion object { private const val HOST_ID = 1024 }

    private val vb = LayoutWidgetsBinding.inflate(LayoutInflater.from(context), this, true)

    private val canvas: FrameLayout  get() = vb.widgetsLayoutContainer
    private val addBtn: ImageButton  get() = vb.addWidgetButton
    private val deleteZone: ImageView get() = vb.deleteZone

    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: AppWidgetHost

    // provided by Activity (no register here!)
    private var bindLauncher: ActivityResultLauncher<Intent>? = null
    private var hostActivity: Activity? = null

    private var pendingWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID
    private var pendingProvider: AppWidgetProviderInfo? = null

    /** Called by container when this page view is actually attached. */
    fun attachToLifecycle(owner: LifecycleOwner) {
        owner.lifecycle.addObserver(this)
        appWidgetManager = AppWidgetManager.getInstance(context.applicationContext)
        appWidgetHost = AppWidgetHost(context.applicationContext, HOST_ID)
    }

    /** Called by container once (uses the pre-registered launcher from Activity). */
    fun setBindLauncher(launcher: ActivityResultLauncher<Intent>, activity: Activity) {
        bindLauncher = launcher
        hostActivity = activity
        addBtn.setOnClickListener { openPicker() }
    }

    // Lifecycle from Activity/Fragment
    override fun onStart(owner: LifecycleOwner) { appWidgetHost.startListening() }
    override fun onStop(owner: LifecycleOwner)  { appWidgetHost.stopListening()  }

    private fun openPicker() {
        val act = hostActivity ?: return
        WidgetPickerBottomSheet(
            context = act,
            appWidgetManager = appWidgetManager,
            appWidgetHost = appWidgetHost
        ) { provider, widgetId ->
            // silent bind first
            if (!appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)) {
                pendingWidgetId = widgetId
                pendingProvider = provider
                val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, provider.provider)
                }
                bindLauncher?.launch(intent) // uses Activity's launcher registered in onCreate()
            } else {
                placeWidget(provider, widgetId)
            }
        }.show()
    }

    /** Forwarded from Activityâ€™s launcher callback. */
    fun onBindActivityResult(resultCode: Int, data: Intent?) {
        if (resultCode != Activity.RESULT_OK) { clearPending(); return }
        val id = data?.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, pendingWidgetId)
            ?: pendingWidgetId
        val info = appWidgetManager.getAppWidgetInfo(id) ?: pendingProvider
        if (info != null && id != AppWidgetManager.INVALID_APPWIDGET_ID) {
            placeWidget(info, id)
        } else {
            toast("Bind result invalid")
        }
        clearPending()
    }

    private fun clearPending() {
        pendingWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID
        pendingProvider = null
    }

    private fun placeWidget(info: AppWidgetProviderInfo, id: Int) {
        val minWdp = max(60, info.minWidth)    // values are in DP
        val minHdp = max(60, info.minHeight)

        val hv: AppWidgetHostView = appWidgetHost.createView(context, id, info).apply {
            setAppWidget(id, info)
            updateAppWidgetSize(Bundle(), minWdp, minHdp, minWdp, minHdp)
            layoutParams = LayoutParams(dp(200f), dp(200f))
        }
        canvas.addView(hv)
        addBtn.bringToFront()
    }

    private fun dp(v: Float) = (v * resources.displayMetrics.density).toInt()
    private fun toast(s: String) = Toast.makeText(context, s, Toast.LENGTH_SHORT).show()
}