private fun returnResult(info: AppWidgetProviderInfo) {
    val appWidgetId = host.allocateAppWidgetId()

    val success = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        // For system app with BIND_APPWIDGET
        appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider)
    } else {
        false
    }

    if (!success) {
        // Fallback → ask system to bind
        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
            putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
            putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
        }
        startActivityForResult(intent, REQUEST_BIND_WIDGET)
        return
    }

    // Don’t start widget config activity if not exported (Samsung blocks it)
    val data = Intent().apply {
        putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
        putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
    }
    setResult(Activity.RESULT_OK, data)
    finish()
}








package your.pkg.widgets

object WidgetContract {
    const val EXTRA_APPWIDGET_ID = "extra_appwidget_id"
    const val EXTRA_PROVIDER = "extra_provider" // ComponentName.flattenToString()
    const val HOST_ID = 1024                    // single host id for the whole app
}



package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.view.ContextThemeWrapper

/**
 * Single host/manager per process. Forces a framework theme so RemoteViews
 * inflate framework widgets (avoids AppCompat* crashes).
 */
object WidgetHostSingleton {
    @Volatile private var host: AppWidgetHost? = null
    @Volatile private var mgr: AppWidgetManager? = null

    fun host(appCtx: Context): AppWidgetHost =
        (host ?: object : AppWidgetHost(appCtx.applicationContext, WidgetContract.HOST_ID) {
            override fun onCreateView(
                context: Context, appWidgetId: Int, appWidget: AppWidgetProviderInfo
            ): AppWidgetHostView {
                val native = ContextThemeWrapper(
                    context.applicationContext, android.R.style.Theme_DeviceDefault
                )
                return AppWidgetHostView(native)
            }
        }).also { host = it }

    fun mgr(appCtx: Context): AppWidgetManager =
        (mgr ?: AppWidgetManager.getInstance(appCtx.applicationContext)).also { mgr = it }

    fun start(appCtx: Context) { host(appCtx).startListening() }
    fun stop() { host?.stopListening() }
}






package your.pkg.widgets

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.content.Intent
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlin.math.abs

class WidgetPickerBottomSheet(
    private val context: Context,
    private val appWidgetManager: AppWidgetManager,
    private val appWidgetHost: AppWidgetHost,
    private val onWidgetSelected: (provider: AppWidgetProviderInfo, previewId: Int) -> Unit
) {
    private var sheet: BottomSheetDialog? = null

    fun show() {
        val d = context.resources.displayMetrics.density
        val maxPx = (210 * d).toInt()
        val tolPx = (50 * d).toInt()

        val providers = appWidgetManager.installedProviders.filter { info ->
            val w = (info.minWidth * d).toInt()
            val h = (info.minHeight * d).toInt()
            abs(w - h) <= tolPx && w <= maxPx && h <= maxPx
        }

        if (providers.isEmpty()) {
            Toast.makeText(context, "No square-like widgets found", Toast.LENGTH_SHORT).show()
            return
        }

        val rv = RecyclerView(context).apply {
            layoutManager = GridLayoutManager(context, 2)
        }

        rv.adapter = object : RecyclerView.Adapter<VH>() {
            override fun getItemCount() = providers.size

            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {
                val row = LinearLayout(context).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(16,16,16,16)
                    layoutParams = ViewGroup.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                }
                return VH(row)
            }

            override fun onBindViewHolder(h: VH, pos: Int) {
                val provider = providers[pos]

                // Allocate id for PREVIEW and (ideally) bind so OEMs render it
                val previewId = appWidgetHost.allocateAppWidgetId()
                h.previewId = previewId

                if (!appWidgetManager.bindAppWidgetIdIfAllowed(previewId, provider.provider)) {
                    (context as? Activity)?.startActivityForResult(
                        Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                            putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, previewId)
                            putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, provider.provider)
                        },
                        9999
                    )
                }

                val preview: AppWidgetHostView? = try {
                    appWidgetHost.createView(context, previewId, provider).apply {
                        layoutParams = LinearLayout.LayoutParams(
                            provider.minWidth.coerceAtLeast(400),
                            provider.minHeight.coerceAtLeast(400)
                        )
                        setAppWidget(previewId, provider)
                    }
                } catch (_: Throwable) { null }

                h.bind(provider.label ?: provider.provider.className, preview) {
                    sheet?.dismiss()
                    onWidgetSelected(provider, previewId)
                }
            }

            override fun onViewRecycled(h: VH) {
                h.previewId?.let { appWidgetHost.deleteAppWidgetId(it) } // delete previews only
                h.previewId = null
            }
        }

        sheet = BottomSheetDialog(context).apply {
            setContentView(rv)
            setOnDismissListener { sheet = null }
            show()
        }
    }

    class VH(val root: LinearLayout) : RecyclerView.ViewHolder(root) {
        var previewId: Int? = null
        fun bind(label: CharSequence, hv: AppWidgetHostView?, onClick: () -> Unit) {
            root.removeAllViews()
            root.addView(TextView(root.context).apply { text = label; setPadding(0,0,0,8) })
            hv?.let { root.addView(it) }
            root.setOnClickListener { onClick() }
        }
    }
}





package your.pkg.widgets

import android.app.Activity
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Intent
import android.os.Bundle
import android.view.Gravity
import android.view.ViewTreeObserver
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast

class WidgetPickerActivity : Activity() {

    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: android.appwidget.AppWidgetHost
    private lateinit var addedWidgetContainer: FrameLayout
    private lateinit var deleteZone: ImageView

    // selection state for bind/configure flows
    private var pendingId: Int? = null
    private var pendingProvider: ComponentName? = null
    private var currentId: Int? = null
    private var currentProvider: ComponentName? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        appWidgetManager = WidgetHostSingleton.mgr(this)
        appWidgetHost    = WidgetHostSingleton.host(this)

        // --- Your existing layout ---
        addedWidgetContainer = FrameLayout(this)
        val root = FrameLayout(this)

        val addWidgetButton = TextView(this).apply {
            text = "➕  Add Widget"
            textSize = 16f
            setOnClickListener { showWidgetPickerBottomSheet() }
            setBackgroundColor(0xFF3F51B5.toInt())
            setTextColor(0xFFFFFFFF.toInt())
            setPadding(32,16,32,16)
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT,
                Gravity.TOP or Gravity.CENTER_HORIZONTAL
            )
        }

        deleteZone = ImageView(this).apply {
            setImageResource(android.R.drawable.ic_menu_delete)
            layoutParams = FrameLayout.LayoutParams(400, 200, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
            visibility = android.view.View.GONE
            alpha = 0.8f
        }

        root.addView(addedWidgetContainer)
        root.addView(addWidgetButton)
        root.addView(deleteZone)
        setContentView(root)

        addedWidgetContainer.viewTreeObserver.addOnGlobalLayoutListener(object : ViewTreeObserver.OnGlobalLayoutListener {
            override fun onGlobalLayout() {
                addedWidgetContainer.viewTreeObserver.removeOnGlobalLayoutListener(this)
            }
        })
    }

    override fun onStart() {
        super.onStart()
        WidgetHostSingleton.start(applicationContext)   // host listens while picker is visible
    }

    override fun onStop() {
        super.onStop()
        WidgetHostSingleton.stop()
    }

    private fun showWidgetPickerBottomSheet() {
        WidgetPickerBottomSheet(
            context = this,
            appWidgetManager = appWidgetManager,
            appWidgetHost = appWidgetHost
        ) { providerInfo: AppWidgetProviderInfo, _/*previewId*/: Int ->
            // Allocate/bind/configure a fresh id for the real widget and return it
            returnResult(providerInfo)
        }.show()
    }

    private fun returnResult(provider: AppWidgetProviderInfo) {
        val providerCN = provider.provider
        val chosenId = appWidgetHost.allocateAppWidgetId()

        if (appWidgetManager.bindAppWidgetIdIfAllowed(chosenId, providerCN)) {
            val cfg = appWidgetManager.getAppWidgetInfo(chosenId)?.configure
            if (cfg != null) {
                currentId = chosenId
                currentProvider = providerCN
                startActivityForResult(
                    Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                        component = cfg
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, chosenId)
                    },
                    REQ_CONFIGURE
                )
            } else {
                finishWithOk(chosenId, providerCN)
            }
        } else {
            pendingId = chosenId
            pendingProvider = providerCN
            startActivityForResult(
                Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, chosenId)
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, providerCN)
                },
                REQ_BIND
            )
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        when (requestCode) {
            REQ_BIND -> {
                val id = pendingId ?: return
                val cn = pendingProvider ?: return
                pendingId = null; pendingProvider = null

                if (resultCode == RESULT_OK) {
                    val cfg = appWidgetManager.getAppWidgetInfo(id)?.configure
                    if (cfg != null) {
                        currentId = id; currentProvider = cn
                        startActivityForResult(
                            Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                                component = cfg
                                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                            },
                            REQ_CONFIGURE
                        )
                    } else {
                        finishWithOk(id, cn)
                    }
                } else {
                    appWidgetHost.deleteAppWidgetId(id)
                    Toast.makeText(this, "Permission denied", Toast.LENGTH_SHORT).show()
                }
            }
            REQ_CONFIGURE -> {
                val id = currentId ?: return
                val cn = currentProvider ?: return
                currentId = null; currentProvider = null
                finishWithOk(id, cn)
            }
        }
    }

    private fun finishWithOk(id: Int, cn: ComponentName) {
        setResult(RESULT_OK, Intent().apply {
            putExtra(WidgetContract.EXTRA_APPWIDGET_ID, id)
            putExtra(WidgetContract.EXTRA_PROVIDER, cn.flattenToString())
        })
        finish()
    }

    override fun onDestroy() {
        super.onDestroy()
        pendingId?.let { appWidgetHost.deleteAppWidgetId(it) } // cleanup canceled binds
    }

    companion object {
        private const val REQ_BIND = 2001
        private const val REQ_CONFIGURE = 2002
    }
}


package your.pkg.widgets

import android.app.Activity
import android.appwidget.AppWidgetHostView
import android.content.ComponentName
import android.content.Context
import android.content.ContextWrapper
import android.content.Intent
import android.graphics.Rect
import android.view.Gravity
import android.view.MotionEvent
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.FrameLayout
import android.widget.ImageView
import com.samsung.android.homemode.ui.interfaces.Page
import com.samsung.android.homemode.ui.pages.PageLayout

/** Return this from PageLayoutFactory for Page.WidgetPage */
class WidgetsLayout(
    context: Context,
    private val page: Page
) : PageLayout(context, page) {

    // --- PageLayout abstract requirements (keep inert to avoid TODO() crashes)
    override fun getSwipeToSAParameter(): String = ""
    override fun getScreenIDSAParameter(): String = ""
    override fun getShowEventIDSAParameter(): String = ""
    override fun getContentLayout(): ViewGroup = canvas

    // shared host/manager
    private val host = WidgetHostSingleton.host(context)
    private val mgr  = WidgetHostSingleton.mgr(context)

    // UI
    private val canvas = FrameLayout(context)
    private val addBtn = Button(context).apply { text = "Add Widget" }
    private val deleteZone = ImageView(context).apply {
        setImageResource(android.R.drawable.ic_menu_delete)
        alpha = 0.85f; visibility = View.GONE
        layoutParams = LayoutParams(400, 200, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
    }

    init {
        addView(canvas, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))
        addView(addBtn, LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.TOP or Gravity.END))
        addView(deleteZone)
        addBtn.setOnClickListener { launchPicker() }
    }

    companion object {
        const val REQ_PICK = 1001
        @JvmStatic internal var lastRequester: java.lang.ref.WeakReference<WidgetsLayout>? = null
    }

    private fun launchPicker() {
        lastRequester = java.lang.ref.WeakReference(this)
        findActivity(context)?.startActivityForResult(
            Intent(context, WidgetPickerActivity::class.java),
            REQ_PICK
        )
    }

    /** Called by host Activity’s onActivityResult when picker returns RESULT_OK */
    fun handlePickerResult(data: Intent) {
        val id = data.getIntExtra(WidgetContract.EXTRA_APPWIDGET_ID, -1)
        val providerStr = data.getStringExtra(WidgetContract.EXTRA_PROVIDER) ?: return
        if (id <= 0) return
        val info = mgr.getAppWidgetInfo(id) ?: return

        val hv: AppWidgetHostView = host.createView(context, id, info).apply {
            layoutParams = LayoutParams(info.minWidth.coerceAtLeast(400), info.minHeight.coerceAtLeast(400))
            setAppWidget(id, info)
        }

        val box = FrameLayout(context).apply {
            layoutParams = LayoutParams(hv.layoutParams.width, hv.layoutParams.height)
            x = 320f; y = 160f
            addView(hv)
            setOnTouchListener(drag(this, id))
        }
        canvas.addView(box)
    }

    private fun drag(box: View, id: Int): View.OnTouchListener {
        var dx = 0f; var dy = 0f
        return View.OnTouchListener { _, e ->
            when (e.action) {
                MotionEvent.ACTION_DOWN -> { dx = box.x - e.rawX; dy = box.y - e.rawY; deleteZone.visibility = View.VISIBLE }
                MotionEvent.ACTION_MOVE -> { box.x = e.rawX + dx; box.y = e.rawY + dy }
                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                    deleteZone.visibility = View.GONE
                    if (overDelete(box)) {
                        (box.parent as ViewGroup).removeView(box)
                        WidgetHostSingleton.host(context).deleteAppWidgetId(id)
                    }
                }
            }
            true
        }
    }

    private fun overDelete(v: View): Boolean {
        val a = IntArray(2); v.getLocationOnScreen(a)
        val b = IntArray(2); deleteZone.getLocationOnScreen(b)
        val ar = Rect(a[0], a[1], a[0] + v.width, a[1] + v.height)
        val br = Rect(b[0], b[1], b[0] + deleteZone.width, b[1] + deleteZone.height)
        return Rect.intersects(ar, br)
    }

    private fun findActivity(c: Context): Activity? =
        generateSequence(c) { (it as? ContextWrapper)?.baseContext }
            .filterIsInstance<Activity>().firstOrNull()
}





<application ...>
    <activity
        android:name="your.pkg.widgets.WidgetPickerActivity"
        android:exported="false"
        android:theme="@style/Theme.MaterialComponents.DayNight.NoActionBar" />
</application>



override fun onStart() {
    super.onStart()
    WidgetHostSingleton.start(applicationContext)   // one host for the whole pager
}

override fun onStop() {
    super.onStop()
    WidgetHostSingleton.stop()
}

override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
    super.onActivityResult(requestCode, resultCode, data)
    if (requestCode == WidgetsLayout.REQ_PICK && resultCode == RESULT_OK && data != null) {
        WidgetsLayout.lastRequester?.get()?.handlePickerResult(data)
    }
}





















##############
package your.pkg.widgets

import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Intent
import android.content.res.Resources
import android.os.Bundle
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlin.math.abs

class WidgetPickerActivity : AppCompatActivity() {

    private val host by lazy { WidgetHostSingleton.host(this) }
    private val mgr  by lazy { WidgetHostSingleton.mgr(this) }

    // ids used while requesting bind; cleaned if canceled
    private var pendingId: Int? = null
    private var pendingProvider: ComponentName? = null

    private var currentId: Int? = null
    private var currentProvider: ComponentName? = null

    private val bindLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { r ->
        val id = pendingId ?: return@registerForActivityResult
        val cn = pendingProvider ?: return@registerForActivityResult
        pendingId = null; pendingProvider = null
        if (r.resultCode == RESULT_OK) onBound(id, cn) else host.deleteAppWidgetId(id)
    }

    private val configureLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) {
        finishWithOk(currentId!!, currentProvider!!)
    }

    override fun onStart() {
        super.onStart()
        WidgetHostSingleton.start(applicationContext)   // host listens during picker
    }

    override fun onStop() {
        super.onStop()
        WidgetHostSingleton.stop()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        showProvidersSheet()
    }

    private fun showProvidersSheet() {
        val d = resources.displayMetrics.density
        val maxPx = (210 * d).toInt()
        val tolPx = (50 * d).toInt()

        // Filter out launcher/OEM widgets that won't render in 3rd-party context
        val providers = mgr.installedProviders.filter { info ->
            val pkg = info.provider.packageName
            val oem = listOf(
                "com.sec.android.","com.samsung.android.","com.android.systemui",
                "com.miui.","com.coloros.","com.oppo.","com.vivo.","com.huawei.","com.hihonor.","com.transsion."
            ).any { pkg.startsWith(it) } || pkg.contains("clockpackage", true) || pkg.contains("launcher", true)
            if (oem) return@filter false
            val w = (info.minWidth * d).toInt()
            val h = (info.minHeight * d).toInt()
            abs(w - h) <= tolPx && w <= maxPx && h <= maxPx
        }

        val sheet = BottomSheetDialog(this)
        val rv = RecyclerView(this).apply { layoutManager = GridLayoutManager(this@WidgetPickerActivity, 2) }

        rv.adapter = object : RecyclerView.Adapter<VH>() {
            override fun getItemCount() = providers.size

            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {
                val row = LinearLayout(this@WidgetPickerActivity).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(16,16,16,16)
                    layoutParams = ViewGroup.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                }
                return VH(row)
            }

            override fun onBindViewHolder(h: VH, position: Int) {
                val info: AppWidgetProviderInfo = providers[position]

                // Allocate a PREVIEW id and bind it (many OEMs need bound id to show preview)
                val previewId = host.allocateAppWidgetId()
                h.currentId = previewId

                if (!mgr.bindAppWidgetIdIfAllowed(previewId, info.provider)) {
                    h.bindText("${info.label} (tap to grant)") {
                        pendingId = previewId
                        pendingProvider = info.provider
                        bindLauncher.launch(
                            Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, previewId)
                                putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                            }
                        )
                    }
                    return
                }

                try {
                    // host.onCreateView already forces a framework theme
                    val preview: AppWidgetHostView = host.createView(this@WidgetPickerActivity, previewId, info).apply {
                        layoutParams = LinearLayout.LayoutParams(
                            info.minWidth.coerceAtLeast(320),
                            info.minHeight.coerceAtLeast(320)
                        )
                        setAppWidget(previewId, info)
                    }

                    // On click, allocate a FRESH id for the actual widget and return it
                    h.bindPreview(info.label ?: info.provider.className, preview) {
                        val chosenId = host.allocateAppWidgetId()
                        if (mgr.bindAppWidgetIdIfAllowed(chosenId, info.provider)) {
                            finishWithOk(chosenId, info.provider)
                        } else {
                            pendingId = chosenId
                            pendingProvider = info.provider
                            bindLauncher.launch(
                                Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, chosenId)
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                                }
                            )
                        }
                    }
                } catch (_: Resources.NotFoundException) {
                    // OEM widget that can't render in third-party context
                    host.deleteAppWidgetId(previewId)
                    h.bindText("${info.label} (not supported)") {}
                } catch (_: Throwable) {
                    host.deleteAppWidgetId(previewId)
                    h.bindText("${info.label} (failed)") {}
                }
            }

            override fun onViewRecycled(h: VH) {
                // delete only PREVIEW ids; the selected id is returned to caller and must persist
                h.currentId?.let { host.deleteAppWidgetId(it) }
                h.currentId = null
            }
        }

        sheet.setOnDismissListener { if (!isFinishing) finish() }
        sheet.setContentView(rv)
        sheet.show()
    }

    private fun onBound(id: Int, cn: ComponentName) {
        currentId = id
        currentProvider = cn
        val cfg = mgr.getAppWidgetInfo(id)?.configure
        if (cfg != null) {
            configureLauncher.launch(
                Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                    component = cfg
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                }
            )
        } else {
            finishWithOk(id, cn)
        }
    }

    private fun finishWithOk(id: Int, cn: ComponentName) {
        setResult(RESULT_OK, Intent().apply {
            putExtra(WidgetContract.EXTRA_APPWIDGET_ID, id)
            putExtra(WidgetContract.EXTRA_PROVIDER, cn.flattenToString())
        })
        finish()
    }

    override fun onDestroy() {
        super.onDestroy()
        // If user bailed mid-bind, free pending preview id
        pendingId?.let { host.deleteAppWidgetId(it) }
    }

    private class VH(val root: LinearLayout) : RecyclerView.ViewHolder(root) {
        var currentId: Int? = null

        fun bindText(label: CharSequence, onClick: () -> Unit) {
            root.removeAllViews()
            root.addView(TextView(root.context).apply { text = label })
            root.setOnClickListener { onClick() }
        }

        fun bindPreview(label: CharSequence, hv: AppWidgetHostView, onClick: () -> Unit) {
            root.removeAllViews()
            root.addView(TextView(root.context).apply { text = label; setPadding(0,0,0,8) })
            root.addView(hv)
            root.setOnClickListener { onClick() }
        }
    }
}










)))))))


rv.adapter = object : RecyclerView.Adapter<VH>() {
    override fun getItemCount() = providers.size

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {
        val row = LinearLayout(this@WidgetPickerActivity).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(16, 16, 16, 16)
            layoutParams = ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
            )
        }
        return VH(row)
    }

    override fun onBindViewHolder(h: VH, position: Int) {
        val info = providers[position]

        // Allocate an id for THE PREVIEW
        val previewId = host.allocateAppWidgetId()
        h.currentId = previewId

        // Ask for bind permission if needed (preview requires a bound id on many OEMs)
        if (!mgr.bindAppWidgetIdIfAllowed(previewId, info.provider)) {
            h.bindText("${info.label} (tap to grant)") {
                pendingId = previewId
                pendingProvider = info.provider
                bindLauncher.launch(
                    Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, previewId)
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                    }
                )
            }
            return
        }

        try {
            // IMPORTANT: framework-themed context to avoid AppCompat* in RemoteViews
            val native = android.view.ContextThemeWrapper(
                applicationContext,
                android.R.style.Theme_DeviceDefault
            )

            val preview = host.createView(native, previewId, info).apply {
                layoutParams = LinearLayout.LayoutParams(
                    info.minWidth.coerceAtLeast(320),
                    info.minHeight.coerceAtLeast(320)
                )
                setAppWidget(previewId, info)
            }

            h.bindPreview(info.label ?: info.provider.className, preview) {
                // User selects row: allocate a FRESH id for the actual widget,
                // bind (or request bind), return that id to the caller.
                val chosenId = host.allocateAppWidgetId()
                if (mgr.bindAppWidgetIdIfAllowed(chosenId, info.provider)) {
                    finishWithOk(chosenId, info.provider)
                } else {
                    pendingId = chosenId
                    pendingProvider = info.provider
                    bindLauncher.launch(
                        Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                            putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, chosenId)
                            putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                        }
                    )
                }
            }
        } catch (e: android.content.res.Resources.NotFoundException) {
            // Widget that can’t render in third-party context (e.g., OEM clock)
            host.deleteAppWidgetId(previewId)
            h.bindText("${info.label} (not supported)") {}
        } catch (t: Throwable) {
            host.deleteAppWidgetId(previewId)
            h.bindText("${info.label} (failed)") {}
        }
    }

    override fun onViewRecycled(h: VH) {
        // Clean up PREVIEW ids only (selected ids are returned by finishWithOk)
        h.currentId?.let { host.deleteAppWidgetId(it) }
        h.currentId = null
    }
}







package your.pkg.widgets

import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Intent
import android.os.Bundle
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlin.math.abs

class WidgetPickerActivity : AppCompatActivity() {

    private val host by lazy { WidgetHostSingleton.host(this) }
    private val mgr  by lazy { WidgetHostSingleton.mgr(this) }

    private var pendingId: Int? = null
    private var pendingProvider: ComponentName? = null
    private var currentId: Int? = null
    private var currentProvider: ComponentName? = null

    private val bindLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { r ->
        val id = pendingId ?: return@registerForActivityResult
        val cn = pendingProvider ?: return@registerForActivityResult
        pendingId = null; pendingProvider = null
        if (r.resultCode == RESULT_OK) onBound(id, cn) else host.deleteAppWidgetId(id)
    }

    private val configureLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
        finishWithOk(currentId!!, currentProvider!!)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        showProvidersSheet()
    }

    private fun showProvidersSheet() {
        val d = resources.displayMetrics.density
        val maxPx = (210 * d).toInt()
        val tolPx = (50 * d).toInt()

        val providers = mgr.installedProviders.filter { info ->
            // filter OEM/launcher-only widgets (Samsung clock, etc.)
            val pkg = info.provider.packageName
            val oem = listOf(
                "com.sec.android.","com.samsung.android.","com.android.systemui",
                "com.miui.","com.coloros.","com.oppo.","com.vivo.","com.huawei.","com.hihonor.","com.transsion."
            ).any { pkg.startsWith(it) } || pkg.contains("clockpackage", true) || pkg.contains("launcher", true)
            if (oem) return@filter false

            val w = (info.minWidth * d).toInt()
            val h = (info.minHeight * d).toInt()
            abs(w - h) <= tolPx && w <= maxPx && h <= maxPx
        }

        val sheet = BottomSheetDialog(this)
        val rv = RecyclerView(this).apply {
            layoutManager = GridLayoutManager(this@WidgetPickerActivity, 2)
            adapter = object : RecyclerView.Adapter<VH>() {
                override fun getItemCount() = providers.size
                override fun onCreateViewHolder(p: ViewGroup, vt: Int) =
                    VH(LinearLayout(this@WidgetPickerActivity).apply {
                        orientation = LinearLayout.VERTICAL; setPadding(16,16,16,16)
                    })
                override fun onBindViewHolder(h: VH, pos: Int) {
                    val info = providers[pos]
                    val id = host.allocateAppWidgetId()
                    h.currentId = id

                    if (!mgr.bindAppWidgetIdIfAllowed(id, info.provider)) {
                        h.label(info.label ?: info.provider.className + " (tap to grant)") {
                            pendingId = id; pendingProvider = info.provider
                            bindLauncher.launch(Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                                putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                            })
                        }
                        return
                    }

                    h.label(info.label ?: info.provider.className) { onBound(id, info.provider) }
                }
                override fun onViewRecycled(h: VH) {
                    h.currentId?.let { host.deleteAppWidgetId(it) }   // delete only previews
                    h.currentId = null
                }
            }
        }
        sheet.setOnDismissListener { if (!isFinishing) finish() }
        sheet.setContentView(rv)
        sheet.show()
    }

    private fun onBound(id: Int, cn: ComponentName) {
        currentId = id; currentProvider = cn
        val configure = mgr.getAppWidgetInfo(id)?.configure
        if (configure != null) {
            configureLauncher.launch(Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                component = configure
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
            })
        } else {
            finishWithOk(id, cn)
        }
    }

    private fun finishWithOk(id: Int, cn: ComponentName) {
        setResult(RESULT_OK, Intent().apply {
            putExtra(WidgetContract.EXTRA_APPWIDGET_ID, id)
            putExtra(WidgetContract.EXTRA_PROVIDER, cn.flattenToString())
        })
        finish()
    }

    override fun onDestroy() {
        super.onDestroy()
        pendingId?.let { host.deleteAppWidgetId(it) } // user backed out without selecting
    }

    private class VH(val root: LinearLayout) : RecyclerView.ViewHolder(root) {
        var currentId: Int? = null
        fun label(txt: CharSequence, onClick: () -> Unit) {
            root.removeAllViews()
            root.addView(TextView(root.context).apply { text = txt })
            root.setOnClickListener { onClick() }
        }
    }
}





package your.pkg.widgets

object WidgetContract {
    const val EXTRA_APPWIDGET_ID = "extra_appwidget_id"
    const val EXTRA_PROVIDER = "extra_provider"
    const val HOST_ID = 1024
}






package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.view.ContextThemeWrapper

object WidgetHostSingleton {
    @Volatile private var host: AppWidgetHost? = null
    @Volatile private var mgr: AppWidgetManager? = null

    fun host(appCtx: Context): AppWidgetHost =
        (host ?: object : AppWidgetHost(appCtx.applicationContext, WidgetContract.HOST_ID) {
            override fun onCreateView(
                context: Context,
                appWidgetId: Int,
                appWidget: AppWidgetProviderInfo
            ): AppWidgetHostView {
                // Framework theme so RemoteViews inflate framework widgets (no AppCompatImageView)
                val native = ContextThemeWrapper(context.applicationContext, android.R.style.Theme_DeviceDefault)
                return AppWidgetHostView(native)
            }
        }).also { host = it }

    fun mgr(appCtx: Context): AppWidgetManager =
        (mgr ?: AppWidgetManager.getInstance(appCtx.applicationContext)).also { mgr = it }

    fun start(appCtx: Context) { host(appCtx).startListening() }
    fun stop() { host?.stopListening() }
}









package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.content.ComponentName
import android.content.Context
import android.content.ContextWrapper
import android.content.Intent
import android.graphics.Rect
import android.view.Gravity
import android.view.MotionEvent
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.TextView
import com.samsung.android.homemode.ui.interfaces.Page
import com.samsung.android.homemode.ui.pages.PageLayout

/** Return this directly from PageFactory for Page.WidgetPage */
class WidgetsLayout(
    context: Context,
    private val page: Page
) : PageLayout(context, page) {

    // ---- PageLayout abstract member(s)
    override fun getSwipeToSAParameter(): String? = null

    // ---- Shared host/manager (single hostId app-wide)
    private val host: AppWidgetHost = WidgetHostSingleton.host(context)
    private val mgr : AppWidgetManager = WidgetHostSingleton.mgr(context)

    // ---- UI
    private val canvas = FrameLayout(context)
    private val addBtn = Button(context).apply { text = "Add Widget" }
    private val deleteZone = ImageView(context).apply {
        setImageResource(android.R.drawable.ic_menu_delete)
        alpha = 0.85f; visibility = View.GONE
        layoutParams = LayoutParams(400, 200, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
    }

    // appWidgetIds placed on canvas (we must not delete them elsewhere)
    private val keptIds = mutableSetOf<Int>()

    init {
        addView(canvas, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))
        val m = (16 * resources.displayMetrics.density).toInt()
        addView(addBtn, LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.TOP or Gravity.END).apply {
            setMargins(m, m, m, m)
        })
        addView(deleteZone)

        addBtn.setOnClickListener { launchPicker() }
    }

    // ---------- Picker interop (Activity receives result, we route back here) ----------
    companion object {
        const val REQ_PICK = 1001
        // the instance that launched the picker; Activity will call back into it
        @JvmStatic internal var lastRequester: java.lang.ref.WeakReference<WidgetsLayout>? = null
    }

    private fun launchPicker() {
        lastRequester = java.lang.ref.WeakReference(this)
        findActivity(context)?.startActivityForResult(
            Intent(context, WidgetPickerActivity::class.java),
            REQ_PICK
        )
    }

    /** Called by Activity onActivityResult */
    fun handlePickerResult(data: Intent) {
        val id = data.getIntExtra(WidgetContract.EXTRA_APPWIDGET_ID, -1)
        val providerStr = data.getStringExtra(WidgetContract.EXTRA_PROVIDER) ?: return
        val provider = ComponentName.unflattenFromString(providerStr) ?: return
        if (id <= 0) return

        keptIds.add(id)
        val info = mgr.getAppWidgetInfo(id) ?: return

        val hostView: AppWidgetHostView = host.createView(context, id, info).apply {
            layoutParams = LayoutParams(info.minWidth.coerceAtLeast(400), info.minHeight.coerceAtLeast(400))
            setAppWidget(id, info)
        }

        val box = FrameLayout(context).apply {
            layoutParams = LayoutParams(hostView.layoutParams.width, hostView.layoutParams.height)
            x = 320f; y = 160f
            addView(hostView)
            setOnTouchListener(drag(this, id))
        }
        canvas.addView(box)
    }

    private fun drag(box: View, id: Int): View.OnTouchListener {
        var dx = 0f; var dy = 0f
        return View.OnTouchListener { _, e ->
            when (e.action) {
                MotionEvent.ACTION_DOWN -> { dx = box.x - e.rawX; dy = box.y - e.rawY; deleteZone.visibility = View.VISIBLE }
                MotionEvent.ACTION_MOVE -> { box.x = e.rawX + dx; box.y = e.rawY + dy }
                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                    deleteZone.visibility = View.GONE
                    if (overDelete(box)) {
                        (box.parent as ViewGroup).removeView(box)
                        keptIds.remove(id)
                        WidgetHostSingleton.host(context).deleteAppWidgetId(id)
                    }
                }
            }
            true
        }
    }

    private fun overDelete(v: View): Boolean {
        val a = IntArray(2); v.getLocationOnScreen(a)
        val b = IntArray(2); deleteZone.getLocationOnScreen(b)
        val ar = Rect(a[0], a[1], a[0] + v.width, a[1] + v.height)
        val br = Rect(b[0], b[1], b[0] + deleteZone.width, b[1] + deleteZone.height)
        return Rect.intersects(ar, br)
    }

    private fun findActivity(c: Context): android.app.Activity? =
        generateSequence(c) { (it as? ContextWrapper)?.baseContext }
            .filterIsInstance<android.app.Activity>().firstOrNull()
}


///////







package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.res.Resources
import android.graphics.Rect
import android.util.Log
import android.view.*
import android.widget.*
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlin.math.abs

/** Return this directly from PageFactory for Page.WidgetPage */
class WidgetsPageLayout(
    context: Context,
    @Suppress("UNUSED_PARAMETER") page: Any? = null
) : FrameLayout(context) {

    /** Provide this from the pager host if you want real bind results. */
    var bindDelegate: AppWidgetBindDelegate? = null

    // Shared host/manager (process-wide)
    private val appCtx = context.applicationContext
    private val host: AppWidgetHost = WidgetHost.host(appCtx)
    private val mgr: AppWidgetManager = WidgetHost.mgr(appCtx)

    // UI: canvas, add button, delete zone
    private val canvas = FrameLayout(context)
    private val addBtn = Button(context).apply { text = "Add Widget" }
    private val deleteZone = ImageView(context).apply {
        setImageResource(android.R.drawable.ic_menu_delete)
        alpha = 0.85f
        visibility = View.GONE
        layoutParams = LayoutParams(400, 200, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
    }

    init {
        layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)
        addView(canvas, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))
        addView(addBtn, LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.TOP or Gravity.END).apply {
            val m = (16 * resources.displayMetrics.density).toInt()
            setMargins(m, m, m, m)
        })
        addView(deleteZone)

        addBtn.setOnClickListener { showPicker() }
    }

    /** Pager attaches/detaches views while swiping — start/stop host here */
    override fun onAttachedToWindow() {
        super.onAttachedToWindow()
        WidgetHost.start()
    }
    override fun onDetachedFromWindow() {
        super.onDetachedFromWindow()
        WidgetHost.stop()
    }

    // ---------- Picker ----------

    private val OEM_PREFIXES = listOf(
        "com.sec.android.", "com.samsung.android.", "com.android.systemui",
        "com.miui.", "com.coloros.", "com.oppo.", "com.vivo.", "com.huawei.", "com.hihonor.", "com.transsion."
    )
    private fun vendorLocked(p: AppWidgetProviderInfo) =
        OEM_PREFIXES.any { p.provider.packageName.startsWith(it) } ||
        p.provider.packageName.contains("clockpackage", true) ||
        p.provider.packageName.contains("launcher", true)

    private fun showPicker() {
        val d = resources.displayMetrics.density
        val maxPx = (210 * d).toInt()
        val tolPx = (50 * d).toInt()

        val providers = mgr.installedProviders.filter {
            !vendorLocked(it) && run {
                val w = (it.minWidth * d).toInt()
                val h = (it.minHeight * d).toInt()
                abs(w - h) <= tolPx && w <= maxPx && h <= maxPx
            }
        }

        val sheet = BottomSheetDialog(context)
        val rv = RecyclerView(context).apply { layoutManager = GridLayoutManager(context, 2) }
        sheet.setContentView(rv)

        rv.adapter = object : RecyclerView.Adapter<VH>() {
            override fun getItemCount() = providers.size
            override fun onCreateViewHolder(p: ViewGroup, vt: Int) =
                VH(LinearLayout(context).apply { orientation = LinearLayout.VERTICAL; setPadding(16, 16, 16, 16) })

            override fun onBindViewHolder(h: VH, pos: Int) {
                val info = providers[pos]
                val id = host.allocateAppWidgetId()
                h.currentId = id

                if (!mgr.bindAppWidgetIdIfAllowed(id, info.provider)) {
                    h.bindText("${info.label} (tap to grant)") {
                        requestBind(id, info.provider) { ok ->
                            if (ok) notifyItemChanged(pos) else host.deleteAppWidgetId(id)
                        }
                    }
                    return
                }

                val nativeCtx = ContextThemeWrapper(appCtx, android.R.style.Theme_DeviceDefault)
                try {
                    val preview = host.createView(nativeCtx, id, info).apply {
                        layoutParams = LinearLayout.LayoutParams(
                            info.minWidth.coerceAtLeast(400),
                            info.minHeight.coerceAtLeast(400)
                        )
                        setAppWidget(id, info)
                    }
                    h.bindPreview(info.label ?: info.provider.className, preview) {
                        sheet.dismiss()
                        addToCanvas(info, id)
                    }
                } catch (e: Resources.NotFoundException) {
                    Log.w("WidgetPicker", "OEM-locked ${info.provider}", e)
                    host.deleteAppWidgetId(id)
                    h.bindText("${info.label} (not supported)") {}
                } catch (t: Throwable) {
                    Log.e("WidgetPicker", "Preview failed for ${info.provider}", t)
                    host.deleteAppWidgetId(id)
                    h.bindText("${info.label} (failed)") {}
                }
            }

            override fun onViewRecycled(h: VH) {
                h.currentId?.let { host.deleteAppWidgetId(it) }
                h.currentId = null
            }
        }

        sheet.show()
    }

    private fun requestBind(id: Int, provider: ComponentName, cb: (Boolean) -> Unit) {
        bindDelegate?.requestBind(id, provider, cb) ?: run {
            // Fallback best-effort (no result callback)
            try {
                context.startActivity(
                    Intent(AppWidgetManager.ACTION_APPWIDGET_BIND)
                        .putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                        .putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, provider)
                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                )
            } catch (_: Throwable) { /* ignore */ }
            cb(false)
        }
    }

    // ---------- Canvas ----------

    private fun addToCanvas(info: AppWidgetProviderInfo, id: Int) {
        val nativeCtx = ContextThemeWrapper(appCtx, android.R.style.Theme_DeviceDefault)
        val hostView = host.createView(nativeCtx, id, info).apply {
            layoutParams = LayoutParams(
                info.minWidth.coerceAtLeast(400),
                info.minHeight.coerceAtLeast(400)
            )
            setAppWidget(id, info)
        }

        val box = FrameLayout(context).apply {
            layoutParams = LayoutParams(hostView.layoutParams.width, hostView.layoutParams.height)
            x = 320f; y = 160f
            addView(hostView)
            setOnTouchListener(drag(this, id))
        }

        if (!overlapsAny(box)) canvas.addView(box)
        else Toast.makeText(context, "❌ Overlaps", Toast.LENGTH_SHORT).show()
    }

    private fun drag(v: View, id: Int): View.OnTouchListener {
        var dx = 0f; var dy = 0f
        return View.OnTouchListener { _, e ->
            when (e.action) {
                MotionEvent.ACTION_DOWN -> {
                    dx = v.x - e.rawX; dy = v.y - e.rawY
                    deleteZone.visibility = View.VISIBLE
                }
                MotionEvent.ACTION_MOVE -> { v.x = e.rawX + dx; v.y = e.rawY + dy }
                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                    deleteZone.visibility = View.GONE
                    if (overDelete(v)) (v.parent as? ViewGroup)?.removeView(v)
                }
            }
            true
        }
    }

    private fun overDelete(v: View): Boolean {
        val a = IntArray(2); v.getLocationOnScreen(a)
        val b = IntArray(2); deleteZone.getLocationOnScreen(b)
        val ar = Rect(a[0], a[1], a[0] + v.width, a[1] + v.height)
        val br = Rect(b[0], b[1], b[0] + deleteZone.width, b[1] + deleteZone.height)
        return Rect.intersects(ar, br)
    }

    private fun overlapsAny(v: View): Boolean {
        val r = Rect(v.x.toInt(), v.y.toInt(), v.x.toInt() + v.width, v.y.toInt() + v.height)
        val t = Rect()
        for (i in 0 until canvas.childCount) {
            val c = canvas.getChildAt(i); if (c === v) continue
            c.getHitRect(t)
            if (Rect(t).intersect(r)) return true
        }
        return false
    }

    class VH(view: View) : RecyclerView.ViewHolder(view) {
        var currentId: Int? = null
        fun bindText(text: String, onClick: () -> Unit) =
            (itemView as ViewGroup).apply {
                removeAllViews()
                addView(TextView(context).apply { this.text = text })
                setOnClickListener { onClick() }
            }
        fun bindPreview(label: CharSequence, hv: AppWidgetHostView, onClick: () -> Unit) =
            (itemView as ViewGroup).apply {
                removeAllViews()
                addView(TextView(context).apply { text = label; setPadding(0, 0, 0, 8) })
                addView(hv)
                setOnClickListener { onClick() }
            }
    }
}






package your.pkg.widgets

import android.appwidget.AppWidgetManager
import android.content.ComponentName

/** Let the container (pager host) perform ACTION_APPWIDGET_BIND and return the result. */
interface AppWidgetBindDelegate {
    fun requestBind(widgetId: Int, provider: ComponentName, onResult: (Boolean) -> Unit)
}






package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.content.Context
import android.util.AttributeSet
import android.view.View

/** RemoteViews needs framework widgets, not AppCompat wrappers */
class NativeAppWidgetHostView(ctx: Context) : AppWidgetHostView(ctx) {
    override fun onCreateView(context: Context?, name: String?, attrs: AttributeSet?): View? =
        when (name) {
            "ImageView"      -> android.widget.ImageView(context, attrs)
            "TextView"       -> android.widget.TextView(context, attrs)
            "ProgressBar"    -> android.widget.ProgressBar(context, attrs)
            "LinearLayout"   -> android.widget.LinearLayout(context, attrs)
            "RelativeLayout" -> android.widget.RelativeLayout(context, attrs)
            else             -> super.onCreateView(context, name, attrs)
        }
}

/** Host that returns our Native HostView */
class NativeAppWidgetHost(ctx: Context, hostId: Int) : AppWidgetHost(ctx, hostId) {
    override fun onCreateView(
        context: Context?, appWidgetId: Int, info: android.appwidget.AppWidgetProviderInfo?
    ): AppWidgetHostView = NativeAppWidgetHostView(context!!)
}

/** Process-wide single hostId reused across all pages (pager friendly) */
object WidgetHost {
    private const val HOST_ID = 1024
    @Volatile private var _host: AppWidgetHost? = null
    @Volatile private var _mgr: AppWidgetManager? = null

    fun host(appCtx: Context): AppWidgetHost =
        (_host ?: NativeAppWidgetHost(appCtx, HOST_ID)).also { _host = it }

    fun mgr(appCtx: Context): AppWidgetManager =
        (_mgr ?: AppWidgetManager.getInstance(appCtx)).also { _mgr = it }

    fun start() { _host?.startListening() }
    fun stop()  { _host?.stopListening()  }
}











------
package your.pkg.widgets

import android.appwidget.AppWidgetManager
import android.content.ComponentName

/** Let the container (pager host) perform ACTION_APPWIDGET_BIND and return the result. */
interface AppWidgetBindDelegate {
    fun requestBind(widgetId: Int, provider: ComponentName, onResult: (Boolean) -> Unit)
}




package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.content.Context
import android.util.AttributeSet
import android.view.View

/** RemoteViews needs framework widgets, not AppCompat wrappers */
class NativeAppWidgetHostView(ctx: Context) : AppWidgetHostView(ctx) {
    override fun onCreateView(context: Context?, name: String?, attrs: AttributeSet?): View? =
        when (name) {
            "ImageView"      -> android.widget.ImageView(context, attrs)
            "TextView"       -> android.widget.TextView(context, attrs)
            "ProgressBar"    -> android.widget.ProgressBar(context, attrs)
            "LinearLayout"   -> android.widget.LinearLayout(context, attrs)
            "RelativeLayout" -> android.widget.RelativeLayout(context, attrs)
            else             -> super.onCreateView(context, name, attrs)
        }
}

/** Host that returns our Native HostView */
class NativeAppWidgetHost(ctx: Context, hostId: Int) : AppWidgetHost(ctx, hostId) {
    override fun onCreateView(
        context: Context?, appWidgetId: Int, info: android.appwidget.AppWidgetProviderInfo?
    ): AppWidgetHostView = NativeAppWidgetHostView(context!!)
}

/** Process-wide single hostId reused across all pages (pager friendly) */
object WidgetHost {
    private const val HOST_ID = 1024
    @Volatile private var _host: AppWidgetHost? = null
    @Volatile private var _mgr: AppWidgetManager? = null

    fun host(appCtx: Context): AppWidgetHost =
        (_host ?: NativeAppWidgetHost(appCtx, HOST_ID)).also { _host = it }

    fun mgr(appCtx: Context): AppWidgetManager =
        (_mgr ?: AppWidgetManager.getInstance(appCtx)).also { _mgr = it }

    fun start() { _host?.startListening() }
    fun stop()  { _host?.stopListening()  }
}






import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.graphics.Rect
import android.os.Bundle
import android.util.Log
import android.view.*
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.view.doOnDetach
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import kotlin.math.abs

class WidgetsFragment : Fragment(R.layout.widget_fragment_layout) {

    private val HOST_ID = 1024
    private lateinit var appWidgetMgr: AppWidgetManager
    private lateinit var host: AppWidgetHost

    private lateinit var container: FrameLayout
    private lateinit var addWidgetBtn: Button
    private lateinit var deleteZone: ImageView

    private var bindCont: ((Boolean) -> Unit)? = null
    private val bindLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
        bindCont?.invoke(res.resultCode == Activity.RESULT_OK)
        bindCont = null
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val ctx = requireContext().applicationContext
        appWidgetMgr = AppWidgetManager.getInstance(ctx)
        host = AppWidgetHost(ctx, HOST_ID)
    }

    override fun onStart() {
        super.onStart()
        host.startListening()
    }

    override fun onStop() {
        super.onStop()
        host.stopListening()
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        container = view.findViewById(R.id.widgets_fragment_container)
        addWidgetBtn = view.findViewById(R.id.add_widget_button)

        deleteZone = ImageView(requireContext()).apply {
            setImageResource(android.R.drawable.ic_menu_delete)
            layoutParams = FrameLayout.LayoutParams(400, 200, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
            visibility = View.GONE
        }
        (view as ViewGroup).addView(deleteZone)

        addWidgetBtn.setOnClickListener { showPicker() }
    }

    private fun showPicker() {
        val ctx = requireActivity()
        val density = ctx.resources.displayMetrics.density
        val maxPx = (210 * density).toInt()
        val tol = (50 * density).toInt()
        val providers = appWidgetMgr.installedProviders.filter {
            val w = it.minWidth * density
            val h = it.minHeight * density
            abs(w - h) <= tol && w <= maxPx && h <= maxPx
        }

        val sheet = BottomSheetDialog(ctx)
        val rv = RecyclerView(ctx).apply { layoutManager = GridLayoutManager(ctx, 2) }
        sheet.setContentView(rv)

        rv.adapter = object : RecyclerView.Adapter<VH>() {
            override fun onCreateViewHolder(p: ViewGroup, vt: Int) =
                VH(LinearLayout(ctx).apply { orientation = LinearLayout.VERTICAL; setPadding(16, 16, 16, 16) })

            override fun getItemCount() = providers.size

            override fun onBindViewHolder(h: VH, pos: Int) {
                val p = providers[pos]
                val id = host.allocateAppWidgetId()
                h.curId = id
                Log.d("WidgetDebug", "Preview: $id hostId=$HOST_ID")

                if (!appWidgetMgr.bindAppWidgetIdIfAllowed(id, p.provider)) {
                    h.bindText("${p.label} (tap to bind)") {
                        requestBind(id, p.provider) { ok ->
                            if (ok) notifyItemChanged(pos) else host.deleteAppWidgetId(id)
                        }
                    }
                    return
                }

                val view = host.createView(ctx, id, p).apply {
                    layoutParams = LinearLayout.LayoutParams(400, 400)
                    setAppWidget(id, p)
                }
                h.bindPreview(p.label, view) {
                    sheet.dismiss()
                    addWidget(p, id)
                }
            }

            override fun onViewRecycled(h: VH) {
                h.curId?.let { host.deleteAppWidgetId(it) }
                h.curId = null
            }
        }

        sheet.show()
    }

    private fun requestBind(id: Int, cn: ComponentName, cont: (Boolean) -> Unit) {
        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
            putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
            putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, cn)
        }
        bindCont = cont
        bindLauncher.launch(intent)
    }

    private fun addWidget(provider: AppWidgetProviderInfo, id: Int) {
        Log.d("WidgetDebug", "Canvas: $id hostId=$HOST_ID")
        val view = host.createView(requireContext(), id, provider).apply {
            layoutParams = FrameLayout.LayoutParams(400, 400)
            setAppWidget(id, provider)
        }
        val box = FrameLayout(requireContext()).apply {
            layoutParams = FrameLayout.LayoutParams(400, 400)
            x = 300f; y = 200f
            addView(view)
            setOnTouchListener(drag(this, id))
            doOnDetach { host.deleteAppWidgetId(id) }
        }
        container.addView(box)
    }

    private fun drag(widget: View, id: Int): View.OnTouchListener {
        var dx = 0f; var dy = 0f
        return View.OnTouchListener { _, e ->
            when (e.action) {
                MotionEvent.ACTION_DOWN -> {
                    dx = widget.x - e.rawX
                    dy = widget.y - e.rawY
                    deleteZone.visibility = View.VISIBLE
                }
                MotionEvent.ACTION_MOVE -> {
                    widget.x = e.rawX + dx
                    widget.y = e.rawY + dy
                }
                MotionEvent.ACTION_UP -> {
                    deleteZone.visibility = View.GONE
                    if (isOver(widget, deleteZone)) {
                        (widget.parent as? ViewGroup)?.removeView(widget)
                    }
                }
            }
            true
        }
    }

    private fun isOver(a: View, b: View): Boolean {
        val aloc = IntArray(2); a.getLocationOnScreen(aloc)
        val bloc = IntArray(2); b.getLocationOnScreen(bloc)
        val ar = Rect(aloc[0], aloc[1], aloc[0] + a.width, aloc[1] + a.height)
        val br = Rect(bloc[0], bloc[1], bloc[0] + b.width, bloc[1] + b.height)
        return Rect.intersects(ar, br)
    }

    class VH(view: View) : RecyclerView.ViewHolder(view) {
        var curId: Int? = null
        fun bindText(label: String, onClick: () -> Unit) {
            (itemView as ViewGroup).apply {
                removeAllViews()
                addView(TextView(context).apply { text = label })
                setOnClickListener { onClick() }
            }
        }
        fun bindPreview(label: String, v: View, onClick: () -> Unit) {
            (itemView as ViewGroup).apply {
                removeAllViews()
                addView(TextView(context).apply { text = label })
                addView(v)
                setOnClickListener { onClick() }
            }
        }
    }
}

















package your.pkg.ui.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Context
import android.os.Bundle
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import kotlin.math.abs

/**
 * Bottom sheet that shows square-ish widgets with live previews.
 * Uses its own AppWidgetHost (previewHost). Cleans up allocated ids when recycled.
 */
class WidgetPickerBottomSheet(
    private val activityContext: Context,
    private val appContext: Context,
    private val appWidgetManager: AppWidgetManager,
    private val previewHost: AppWidgetHost,
    private val onRequestBind: (widgetId: Int, provider: ComponentName, cont: (Boolean) -> Unit) -> Unit,
    private val onWidgetChosen: (AppWidgetProviderInfo, Int) -> Unit,
    private val onDismiss: () -> Unit
) : BottomSheetDialogFragment() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setStyle(STYLE_NO_TITLE, 0)
    }

    override fun onCreateDialog(savedInstanceState: Bundle?) =
        object : com.google.android.material.bottomsheet.BottomSheetDialog(requireContext()) {
            override fun onDetachedFromWindow() {
                super.onDetachedFromWindow()
                onDismiss()
            }
        }

    override fun onStart() {
        super.onStart()
        // Host is started by the fragment before showing; keep that contract.
    }

    override fun onCreateView(inflater: android.view.LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?) =
        RecyclerView(requireContext()).apply {
            layoutManager = GridLayoutManager(requireContext(), 2)
            adapter = buildAdapter()
        }

    private fun buildAdapter(): RecyclerView.Adapter<VH> {
        val density = activityContext.resources.displayMetrics.density
        val maxPx = (210 * density).toInt()
        val tolPx = (50 * density).toInt()

        val providers = appWidgetManager.installedProviders.filter {
            val w = (it.minWidth * density).toInt()
            val h = (it.minHeight * density).toInt()
            abs(w - h) <= tolPx && w <= maxPx && h <= maxPx
        }

        return object : RecyclerView.Adapter<VH>() {
            override fun onCreateViewHolder(p: ViewGroup, vt: Int) =
                VH(LinearLayout(activityContext).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(16, 16, 16, 16)
                    layoutParams = ViewGroup.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    )
                })

            override fun getItemCount() = providers.size

            override fun onBindViewHolder(h: VH, pos: Int) {
                val provider = providers[pos]
                val widgetId = previewHost.allocateAppWidgetId()
                h.currentWidgetId = widgetId

                val bound = appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)
                if (!bound) {
                    // Ask user to grant for this provider
                    h.bindTextOnly("${provider.label} (tap to grant)") {
                        onRequestBind(widgetId, provider.provider) { ok ->
                            if (ok) notifyItemChanged(pos) else {
                                previewHost.deleteAppWidgetId(widgetId)
                                h.currentWidgetId = null
                            }
                        }
                    }
                    return
                }

                val preview = previewHost.createView(activityContext, widgetId, provider).apply {
                    layoutParams = LinearLayout.LayoutParams(
                        provider.minWidth.coerceAtLeast(400),
                        provider.minHeight.coerceAtLeast(400)
                    )
                    setAppWidget(widgetId, provider)
                }

                h.bindPreview(provider.label ?: provider.provider.className, preview) {
                    dismissAllowingStateLoss()
                    onWidgetChosen(provider, widgetId) // promote to canvas
                }
            }

            override fun onViewRecycled(h: VH) {
                h.currentWidgetId?.let { previewHost.deleteAppWidgetId(it) }
                h.currentWidgetId = null
                super.onViewRecycled(h)
            }
        }
    }

    class VH(view: android.view.View) : RecyclerView.ViewHolder(view) {
        var currentWidgetId: Int? = null

        fun bindTextOnly(label: CharSequence, onClick: () -> Unit) {
            (itemView as ViewGroup).apply {
                removeAllViews()
                addView(TextView(context).apply {
                    text = label
                    setPadding(0, 0, 0, 8)
                })
                setOnClickListener { onClick() }
            }
        }

        fun bindPreview(label: CharSequence, hostView: android.appwidget.AppWidgetHostView, onClick: () -> Unit) {
            (itemView as ViewGroup).apply {
                removeAllViews()
                addView(TextView(context).apply {
                    text = label
                    setPadding(0, 0, 0, 8)
                })
                addView(hostView)
                setOnClickListener { onClick() }
            }
            currentWidgetId = hostView.appWidgetId
        }
    }
}






package your.pkg.ui.widgets

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Intent
import android.graphics.Rect
import android.os.Bundle
import android.view.*
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.view.doOnDetach
import androidx.fragment.app.Fragment
import your.pkg.R
import kotlin.math.abs

/**
 * Fragment that hosts placed widgets and opens a bottom-sheet to pick widgets.
 * Key points:
 * - Two hosts: one for previews, one for live canvas
 * - Hosts started/stopped in correct lifecycle callbacks
 * - Activity context for createView; application context for Host/Manager
 */
class WidgetsFragment : Fragment(R.layout.widget_fragment_layout) {

    companion object {
        private const val LIVE_HOST_ID = 1024
        private const val PREVIEW_HOST_ID = 1025
    }

    private lateinit var appWidgetMgr: AppWidgetManager
    private lateinit var liveHost: AppWidgetHost
    private lateinit var previewHost: AppWidgetHost

    private lateinit var widgetsLayoutContainer: FrameLayout
    private lateinit var addWidgetBtn: Button
    private lateinit var deleteZone: ImageView

    // Continuation for binding permission from preview rows
    private var pendingBindContinuation: ((Boolean) -> Unit)? = null

    private val bindLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            pendingBindContinuation?.invoke(res.resultCode == Activity.RESULT_OK)
            pendingBindContinuation = null
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val appCtx = requireContext().applicationContext
        appWidgetMgr = AppWidgetManager.getInstance(appCtx)
        liveHost = AppWidgetHost(appCtx, LIVE_HOST_ID)
        previewHost = AppWidgetHost(appCtx, PREVIEW_HOST_ID)
    }

    override fun onStart() {
        super.onStart()
        // Listen for updates only while the fragment is started/visible
        liveHost.startListening()
    }

    override fun onStop() {
        super.onStop()
        liveHost.stopListening()
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        widgetsLayoutContainer = view.findViewById(R.id.widgets_fragment_container)
        addWidgetBtn = view.findViewById(R.id.add_widget_button)

        deleteZone = ImageView(requireContext()).apply {
            setImageResource(android.R.drawable.ic_menu_delete)
            layoutParams = FrameLayout.LayoutParams(
                resources.displayMetrics.density.times(200f).toInt(),
                resources.displayMetrics.density.times(80f).toInt(),
                Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL
            )
            alpha = 0.85f
            visibility = View.GONE
        }
        (view as ViewGroup).addView(deleteZone)

        addWidgetBtn.setOnClickListener { showWidgetPickerBottomSheet() }
    }

    // ---------- Picker ----------

    private fun showWidgetPickerBottomSheet() {
        // Start listening ONLY for the preview session
        previewHost.startListening()

        val sheet = WidgetPickerBottomSheet(
            activityContext = requireActivity(),             // for createView / theming
            appContext = requireContext().applicationContext,// for Host/Manager
            appWidgetManager = appWidgetMgr,
            previewHost = previewHost,
            onRequestBind = ::requestBind,
            onWidgetChosen = { provider, widgetId ->
                // Stop preview host now; the chosen id is promoted to live host
                previewHost.stopListening()
                addWidgetToCanvas(provider, widgetId)
            },
            onDismiss = {
                // Safety net
                previewHost.stopListening()
            }
        )
        sheet.show(parentFragmentManager, "WidgetPickerBottomSheet")
    }

    private fun requestBind(widgetId: Int, provider: ComponentName, cont: (Boolean) -> Unit) {
        val intent = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
            putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId)
            putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, provider)
        }
        pendingBindContinuation = cont
        bindLauncher.launch(intent)
    }

    // ---------- Canvas placement & interactions ----------

    private fun addWidgetToCanvas(provider: AppWidgetProviderInfo, widgetId: Int) {
        val width = provider.minWidth.coerceAtLeast(400)
        val height = provider.minHeight.coerceAtLeast(400)

        val hostView = liveHost.createView(requireContext(), widgetId, provider).apply {
            layoutParams = FrameLayout.LayoutParams(width, height)
            setAppWidget(widgetId, provider)
        }

        val container = FrameLayout(requireContext()).apply {
            layoutParams = FrameLayout.LayoutParams(width, height)
            x = 400f
            y = 150f
            addView(hostView)
            setOnTouchListener(widgetTouchListener(this, widgetId, provider))
        }

        if (!isOverlappingAny(container)) {
            widgetsLayoutContainer.addView(container)
        } else {
            Toast.makeText(requireContext(), "❌ Can't place: Overlapping", Toast.LENGTH_SHORT).show()
            // Optionally free the id if you won't use it
            // liveHost.deleteAppWidgetId(widgetId)
        }

        // Clean up when container detaches (e.g., removed)
        container.doOnDetach {
            // If you want to delete the widget when removed from canvas:
            // liveHost.deleteAppWidgetId(widgetId)
        }
    }

    private fun widgetTouchListener(widget: View, widgetId: Int, provider: AppWidgetProviderInfo): View.OnTouchListener {
        var dX = 0f
        var dY = 0f
        var dragging = false

        return View.OnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    dX = widget.x - event.rawX
                    dY = widget.y - event.rawY
                    dragging = false
                }
                MotionEvent.ACTION_MOVE -> {
                    widget.x = event.rawX + dX
                    widget.y = event.rawY + dY
                    deleteZone.visibility = View.VISIBLE
                    dragging = true
                }
                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                    deleteZone.visibility = View.GONE
                    if (isOverDeleteZone(widget)) {
                        (widget.parent as? ViewGroup)?.removeView(widget)
                        Toast.makeText(requireContext(), "🗑️ Widget Removed", Toast.LENGTH_SHORT).show()
                        // liveHost.deleteAppWidgetId(widgetId) // if you want to free the id
                    } else if (isOverlappingAny(widget)) {
                        Toast.makeText(requireContext(), "❌ Overlaps with existing", Toast.LENGTH_SHORT).show()
                        // Snap back somewhere safe
                        widget.x = 100f
                        widget.y = 100f
                    } else if (!dragging) {
                        // tap
                        // Optionally forward click to widget
                        (widget as? ViewGroup)?.getChildAt(0)?.performClick()
                    }
                }
            }
            true
        }
    }

    private fun isOverDeleteZone(view: View): Boolean {
        val loc = IntArray(2)
        deleteZone.getLocationOnScreen(loc)
        val zx = loc[0]
        val zy = loc[1]
        val cx = (view.x + view.width / 2f).toInt()
        val cy = (view.y + view.height / 2f).toInt()
        return (cx in zx..(zx + deleteZone.width)) && (cy in zy..(zy + deleteZone.height))
    }

    private fun isOverlappingAny(view: View): Boolean {
        val out = Rect()
        val vr = Rect(
            view.x.toInt(),
            view.y.toInt(),
            view.x.toInt() + view.width,
            view.y.toInt() + view.height
        )
        for (i in 0 until widgetsLayoutContainer.childCount) {
            val child = widgetsLayoutContainer.getChildAt(i)
            if (child === view) continue
            child.getHitRect(out)
            if (Rect(out).intersect(vr)) return true
        }
        return false
    }
}
