koi package com.example.mynewwidget

import android.annotation.SuppressLint
import android.app.Activity
import android.appwidget.*
import android.content.ComponentName
import android.content.Context
import android.graphics.Rect
import android.os.Bundle
import android.view.*
import android.widget.*
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import org.json.JSONArray
import org.json.JSONObject
import kotlin.math.abs

class MainActivity : Activity() {
    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: AppWidgetHost
    private lateinit var addedWidgetContainer: FrameLayout
    private lateinit var deleteZone: ImageView
    private val PREFS_NAME = "widget_prefs"
    private val PREF_WIDGET_POSITIONS = "widget_positions"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        appWidgetManager = AppWidgetManager.getInstance(this)
        appWidgetHost = AppWidgetHost(this, 1024)
        appWidgetHost.startListening()

        addedWidgetContainer = FrameLayout(this)
        val root = FrameLayout(this)

        val addWidgetButton = TextView(this).apply {
            text = "‚ûï Add Widget"
            textSize = 16f
            setOnClickListener { showWidgetPickerBottomSheet() }
            setBackgroundColor(0xFF3F51B5.toInt())
            setTextColor(0xFFFFFFFF.toInt())
            setPadding(32, 16, 32, 16)
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT,
                Gravity.TOP or Gravity.CENTER_HORIZONTAL
            )
            z = 10f
        }

        deleteZone = ImageView(this).apply {
            setImageResource(android.R.drawable.ic_menu_delete)
            layoutParams = FrameLayout.LayoutParams(150, 150, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
            visibility = View.GONE
            alpha = 0.8f
        }

        root.addView(addedWidgetContainer)
        root.addView(addWidgetButton)
        root.addView(deleteZone)
        setContentView(root)

        addedWidgetContainer.viewTreeObserver.addOnGlobalLayoutListener(object :
            ViewTreeObserver.OnGlobalLayoutListener {
            override fun onGlobalLayout() {
                addedWidgetContainer.viewTreeObserver.removeOnGlobalLayoutListener(this)
                restoreWidgetsFromPrefs()
            }
        })
    }

    private fun showWidgetPickerBottomSheet() {
        val bottomSheet = BottomSheetDialog(this)
        val recyclerView = RecyclerView(this).apply {
            layoutManager = GridLayoutManager(context, 2)
        }

        val density = resources.displayMetrics.density
        val maxCellDp = 210
        val squareToleranceDp = 50

        val maxPx = (maxCellDp * density).toInt()
        val tolerancePx = (squareToleranceDp * density).toInt()

        val filteredWidgets = appWidgetManager.installedProviders.filter {
            val w = (it.minWidth * density).toInt()
            val h = (it.minHeight * density).toInt()
            abs(w - h) <= tolerancePx && w <= maxPx && h <= maxPx &&
            (it.previewImage != 0) // filter out those with no preview
        }

        if (filteredWidgets.isEmpty()) {
            Toast.makeText(this, "No square-like widgets with preview found", Toast.LENGTH_SHORT).show()
            return
        }

        val adapter = object : RecyclerView.Adapter<WidgetViewHolder>() {
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WidgetViewHolder {
                val layout = LinearLayout(parent.context).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(16, 16, 16, 16)
                }
                return WidgetViewHolder(layout)
            }

            override fun onBindViewHolder(holder: WidgetViewHolder, position: Int) {
                val provider = filteredWidgets[position]
                val widgetId = appWidgetHost.allocateAppWidgetId()
                val bound = appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)
                if (!bound) return

                val previewView = appWidgetHost.createView(this@MainActivity, widgetId, provider)

                if (previewView == null || previewView.measuredWidth == 0 || previewView.measuredHeight == 0) {
                    return  // don't show empty views
                }

                previewView.setAppWidget(widgetId, provider)
                previewView.layoutParams = LinearLayout.LayoutParams(
                    provider.minWidth.coerceAtLeast(200),
                    provider.minHeight.coerceAtLeast(200)
                )

                (holder.itemView as LinearLayout).apply {
                    removeAllViews()
                    addView(TextView(context).apply {
                        text = provider.label
                        setPadding(0, 0, 0, 8)
                    })
                    addView(previewView)
                    setOnClickListener {
                        bottomSheet.dismiss()
                        addWidgetToActivity(provider, widgetId)
                    }
                }
            }

            override fun getItemCount(): Int = filteredWidgets.size
        }

        recyclerView.adapter = adapter
        bottomSheet.setContentView(recyclerView)
        bottomSheet.show()
    }

    private fun addWidgetToActivity(provider: AppWidgetProviderInfo, widgetId: Int) {
        val width = provider.minWidth.coerceAtLeast(200)
        val height = provider.minHeight.coerceAtLeast(200)

        val hostView = appWidgetHost.createView(this, widgetId, provider)
        hostView.setAppWidget(widgetId, provider)
        hostView.layoutParams = FrameLayout.LayoutParams(width, height)

        val container = FrameLayout(this).apply {
            layoutParams = FrameLayout.LayoutParams(width, height)
            x = 100f
            y = 100f
            addView(hostView)
            setOnTouchListener(widgetTouchListener(this, widgetId, provider))
        }

        if (!isOverlappingAny(container)) {
            addedWidgetContainer.addView(container)
            saveWidgetToPrefs(widgetId, provider.provider, 100, 100, width, height)
        } else {
            Toast.makeText(this, " Can't place: Overlapping", Toast.LENGTH_SHORT).show()
        }
    }

    @SuppressLint("ClickableViewAccessibility")
    private fun widgetTouchListener(widget: View, widgetId: Int, provider: AppWidgetProviderInfo): View.OnTouchListener {
        var dX = 0f
        var dY = 0f
        var isDragging = false

        return View.OnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    dX = widget.x - event.rawX
                    dY = widget.y - event.rawY
                    isDragging = false
                }

                MotionEvent.ACTION_MOVE -> {
                    widget.x = event.rawX + dX
                    widget.y = event.rawY + dY
                    deleteZone.visibility = View.VISIBLE
                    isDragging = true
                }

                MotionEvent.ACTION_UP -> {
                    deleteZone.visibility = View.GONE
                    if (isOverDeleteZone(widget)) {
                        (widget.parent as? ViewGroup)?.removeView(widget)
                        Toast.makeText(this, "üóëÔ∏è Widget Removed", Toast.LENGTH_SHORT).show()
                    } else if (isOverlappingAny(widget)) {
                        Toast.makeText(this, "‚ùå Overlaps with existing", Toast.LENGTH_SHORT).show()
                        widget.x = 100f
                        widget.y = 100f
                    } else if (isDragging) {
                        saveWidgetToPrefs(widgetId, provider.provider, widget.x.toInt(), widget.y.toInt(), widget.width, widget.height)
                    }
                }
            }
            true
        }
    }

    private fun isOverDeleteZone(view: View): Boolean {
        val loc = IntArray(2)
        deleteZone.getLocationOnScreen(loc)
        val x = loc[0]
        val y = loc[1]

        val centerX = (view.x + view.width / 2).toInt()
        val centerY = (view.y + view.height / 2).toInt()

        return centerX in x..(x + deleteZone.width) && centerY in y..(y + deleteZone.height)
    }

    private fun isOverlappingAny(view: View): Boolean {
        for (i in 0 until addedWidgetContainer.childCount) {
            val child = addedWidgetContainer.getChildAt(i)
            if (child == view) continue
            if (Rect().apply { child.getHitRect(this) }.intersect(
                    Rect().apply {
                        set(
                            view.x.toInt(),
                            view.y.toInt(),
                            view.x.toInt() + view.width,
                            view.y.toInt() + view.height
                        )
                    }
                )
            ) {
                return true
            }
        }
        return false
    }

    private fun saveWidgetToPrefs(widgetId: Int, provider: ComponentName, x: Int, y: Int, w: Int, h: Int) {
        val prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
        val arr = JSONArray(prefs.getString(PREF_WIDGET_POSITIONS, "[]"))
        arr.put(JSONObject().apply {
            put("id", widgetId)
            put("provider", provider.flattenToString())
            put("x", x)
            put("y", y)
            put("w", w)
            put("h", h)
        })
        prefs.edit().putString(PREF_WIDGET_POSITIONS, arr.toString()).apply()
    }

    private fun restoreWidgetsFromPrefs() {
        val prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
        val arr = JSONArray(prefs.getString(PREF_WIDGET_POSITIONS, "[]"))
        for (i in 0 until arr.length()) {
            val obj = arr.getJSONObject(i)
            val widgetId = obj.getInt("id")
            val provider = ComponentName.unflattenFromString(obj.getString("provider")) ?: continue
            val info = appWidgetManager.getAppWidgetInfo(widgetId) ?: continue
            addWidgetToActivity(info, widgetId)
        }
    }

    class WidgetViewHolder(view: View) : RecyclerView.ViewHolder(view)
}



override fun onBindViewHolder(holder: WidgetViewHolder, position: Int) {
    val provider = filteredWidgets[position]

    val container = holder.itemView as LinearLayout
    container.removeAllViews()
    container.addView(TextView(container.context).apply {
        text = provider.label
        setPadding(0, 0, 0, 8)
    })

    // Use preview cache if available
    val preview: View = previewCache[provider.provider] ?: run {
        val widgetId = widgetIdCache.getOrPut(provider.provider) {
            appWidgetHost.allocateAppWidgetId()
        }

        if (appWidgetManager.bindAppWidgetIdIfAllowed(widgetIdCache[provider.provider]!!, provider.provider)) {
            val widgetView = appWidgetHost.createView(this@MainActivity, widgetId, provider).apply {
                layoutParams = LinearLayout.LayoutParams(
                    provider.minWidth.coerceAtLeast(200),
                    provider.minHeight.coerceAtLeast(200)
                )
            }

            previewCache[provider.provider] = widgetView
            widgetView
        } else {
            TextView(container.context).apply { text = "Permission Required" }
        }
    }

    container.addView(preview)

    container.setOnClickListener {
        bottomSheet.dismiss()
        addWidgetToActivity(provider, widgetIdCache[provider.provider]!!)
    }
}














#####

package com.example.mynewwidget

import android.appwidget.*
import android.content.ComponentName
import android.content.Context
import android.view.*
import android.widget.*
import androidx.recyclerview.widget.*
import com.google.android.material.bottomsheet.BottomSheetDialog

class WidgetPickerBottomSheet(
    private val context: Context,
    private val appWidgetManager: AppWidgetManager,
    private val appWidgetHost: AppWidgetHost,
    private val previewCache: MutableMap<ComponentName, View>,
    private val widgetIdCache: MutableMap<ComponentName, Int>,
    private val onWidgetSelected: (AppWidgetProviderInfo, Int) -> Unit
) {
    fun show() {
        val dialog = BottomSheetDialog(context)
        val recyclerView = RecyclerView(context).apply {
            layoutManager = GridLayoutManager(context, 2)
        }

        val providers = appWidgetManager.installedProviders
            .filter { it.minWidth <= 250 && it.minHeight <= 250 } // You can adjust filter

        recyclerView.adapter = object : RecyclerView.Adapter<WidgetViewHolder>() {
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WidgetViewHolder {
                val layout = LinearLayout(context).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(16, 16, 16, 16)
                }
                return WidgetViewHolder(layout)
            }

            override fun onBindViewHolder(holder: WidgetViewHolder, position: Int) {
                val provider = providers[position]

                val preview = previewCache[provider.provider] ?: run {
                    val widgetId = widgetIdCache.getOrPut(provider.provider) {
                        appWidgetHost.allocateAppWidgetId()
                    }

                    if (!appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)) {
                        return
                    }

                    val view = appWidgetHost.createView(context, widgetId, provider)
                    view.setAppWidget(widgetId, provider)
                    previewCache[provider.provider] = view
                    view
                }

                (holder.itemView as ViewGroup).apply {
                    removeAllViews()
                    addView(TextView(context).apply { text = provider.label })
                    addView(preview)
                    setOnClickListener {
                        dialog.dismiss()
                        val widgetId = widgetIdCache[provider.provider]!!
                        onWidgetSelected(provider, widgetId)
                    }
                }
            }

            override fun getItemCount(): Int = providers.size
        }

        dialog.setContentView(recyclerView)
        dialog.show()
    }

    class WidgetViewHolder(view: View) : RecyclerView.ViewHolder(view)
}











package com.example.mynewwidget

import android.app.Activity
import android.appwidget.*
import android.content.ComponentName
import android.content.Context
import android.graphics.Rect
import android.os.Bundle
import android.view.*
import android.widget.*
import org.json.JSONArray
import org.json.JSONObject

class MainActivity : Activity() {
    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: AppWidgetHost
    private lateinit var container: FrameLayout
    private val previewCache = mutableMapOf<ComponentName, View>()
    private val widgetIdCache = mutableMapOf<ComponentName, Int>()

    private val PREFS_NAME = "widget_prefs"
    private val PREF_KEY = "widget_list"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        appWidgetManager = AppWidgetManager.getInstance(this)
        appWidgetHost = AppWidgetHost(this, 2048)
        appWidgetHost.startListening()

        val root = FrameLayout(this)
        container = FrameLayout(this)

        val addButton = Button(this).apply {
            text = "Add Widget"
            setOnClickListener {
                WidgetPickerBottomSheet(
                    context = this@MainActivity,
                    appWidgetManager = appWidgetManager,
                    appWidgetHost = appWidgetHost,
                    previewCache = previewCache,
                    widgetIdCache = widgetIdCache
                ) { info, id ->
                    addWidget(info, id)
                }.show()
            }
        }

        root.addView(container)
        root.addView(addButton, FrameLayout.LayoutParams(
            FrameLayout.LayoutParams.WRAP_CONTENT,
            FrameLayout.LayoutParams.WRAP_CONTENT,
            Gravity.TOP or Gravity.CENTER_HORIZONTAL
        ))

        setContentView(root)
    }

    private fun addWidget(info: AppWidgetProviderInfo, widgetId: Int) {
        val hostView = appWidgetHost.createView(this, widgetId, info)
        hostView.setAppWidget(widgetId, info)

        val frame = FrameLayout(this).apply {
            layoutParams = FrameLayout.LayoutParams(info.minWidth, info.minHeight)
            x = 100f
            y = 100f
            addView(hostView)
        }

        container.addView(frame)
        saveWidget(widgetId, info.provider, 100, 100)
    }

    private fun saveWidget(id: Int, provider: ComponentName, x: Int, y: Int) {
        val prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
        val arr = JSONArray(prefs.getString(PREF_KEY, "[]"))
        arr.put(JSONObject().apply {
            put("id", id)
            put("provider", provider.flattenToString())
            put("x", x)
            put("y", y)
        })
        prefs.edit().putString(PREF_KEY, arr.toString()).apply()
    }
}























(((((((((

package com.example.mynewwidget

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Context
import android.graphics.Rect
import android.os.Bundle
import android.view.*
import android.widget.*
import androidx.fragment.app.FragmentActivity
import com.example.mynewwidget.databinding.ActivityMainBinding

class MainActivity : FragmentActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: AppWidgetHost

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        appWidgetManager = AppWidgetManager.getInstance(this)
        appWidgetHost = AppWidgetHost(this, 1024)
        appWidgetHost.startListening()

        binding.addWidgetButton.setOnClickListener {
            WidgetPickerBottomSheet.newInstance(appWidgetHost, appWidgetManager) {
                addWidgetToHost(it)
            }.show(supportFragmentManager, "WidgetPicker")
        }
    }

    private fun addWidgetToHost(pair: Pair<AppWidgetProviderInfo, Int>) {
        val (info, widgetId) = pair
        val hostView = appWidgetHost.createView(this, widgetId, info)
        hostView.setAppWidget(widgetId, info)

        val container = FrameLayout(this).apply {
            layoutParams = FrameLayout.LayoutParams(info.minWidth, info.minHeight)
            x = 100f
            y = 100f
            addView(hostView)
        }

        binding.widgetContainer.addView(container)
    }
}







package com.example.mynewwidget

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.mynewwidget.databinding.BottomSheetWidgetPickerBinding
import com.google.android.material.bottomsheet.BottomSheetDialogFragment

class WidgetPickerBottomSheet(
    private val host: AppWidgetHost,
    private val manager: AppWidgetManager,
    private val onWidgetSelected: (Pair<AppWidgetProviderInfo, Int>) -> Unit
) : BottomSheetDialogFragment() {

    private lateinit var binding: BottomSheetWidgetPickerBinding

    private val previewCache = mutableMapOf<ComponentName, View>()
    private val widgetIdCache = mutableMapOf<ComponentName, Int>()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View {
        binding = BottomSheetWidgetPickerBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        binding.recyclerView.layoutManager = GridLayoutManager(requireContext(), 2)

        val providers = manager.installedProviders.filter {
            it.minWidth == it.minHeight && it.minWidth <= 250 // simple square filter
        }

        val adapter = object : RecyclerView.Adapter<WidgetViewHolder>() {
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WidgetViewHolder {
                val layout = LinearLayout(parent.context).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(16, 16, 16, 16)
                }
                return WidgetViewHolder(layout)
            }

            override fun onBindViewHolder(holder: WidgetViewHolder, position: Int) {
                val provider = providers[position]
                val comp = provider.provider

                val layout = holder.itemView as LinearLayout
                layout.removeAllViews()

                layout.addView(TextView(context).apply {
                    text = provider.label
                })

                val cachedView = previewCache[comp]
                if (cachedView != null) {
                    layout.addView(cachedView)
                } else {
                    val widgetId = widgetIdCache.getOrPut(comp) {
                        host.allocateAppWidgetId().also {
                            manager.bindAppWidgetIdIfAllowed(it, provider.provider)
                        }
                    }

                    val preview = host.createView(requireContext(), widgetId, provider)
                    preview.setAppWidget(widgetId, provider)

                    layout.addView(preview)
                    previewCache[comp] = preview
                }

                layout.setOnClickListener {
                    val id = widgetIdCache[comp] ?: return@setOnClickListener
                    onWidgetSelected(provider to id)
                    dismiss()
                }
            }

            override fun getItemCount(): Int = providers.size
        }

        binding.recyclerView.adapter = adapter
    }

    companion object {
        fun newInstance(
            host: AppWidgetHost,
            manager: AppWidgetManager,
            onWidgetSelected: (Pair<AppWidgetProviderInfo, Int>) -> Unit
        ) = WidgetPickerBottomSheet(host, manager, onWidgetSelected)
    }

    class WidgetViewHolder(view: View) : RecyclerView.ViewHolder(view)
}








<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/root"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <FrameLayout
        android:id="@+id/widgetContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <Button
        android:id="@+id/addWidgetButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="‚ûï Add Widget"
        android:layout_gravity="top|center_horizontal"
        android:layout_marginTop="16dp"
        android:backgroundTint="#3F51B5"
        android:textColor="#FFF" />
</FrameLayout>



<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/pickerContainer"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="16dp">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:clipToPadding="false"
        android:scrollbars="vertical" />

</FrameLayout>









package com.example.mynewwidget

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.os.Bundle
import android.view.Gravity
import android.widget.*
import com.google.android.material.bottomsheet.BottomSheetDialog

class MainActivity : Activity() {

    private lateinit var appWidgetManager: AppWidgetManager
    private lateinit var appWidgetHost: AppWidgetHost
    private lateinit var addedWidgetContainer: FrameLayout

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        appWidgetManager = AppWidgetManager.getInstance(this)
        appWidgetHost = AppWidgetHost(this, 2048)
        appWidgetHost.startListening()

        addedWidgetContainer = FrameLayout(this)
        val rootLayout = FrameLayout(this)

        val addWidgetButton = Button(this).apply {
            text = "Add Widget"
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                gravity = Gravity.TOP or Gravity.CENTER_HORIZONTAL
                topMargin = 50
            }
            setOnClickListener {
                WidgetPickerBottomSheet.show(
                    activity = this@MainActivity,
                    appWidgetManager = appWidgetManager,
                    appWidgetHost = appWidgetHost
                ) { info, widgetId ->
                    val hostView = appWidgetHost.createView(this@MainActivity, widgetId, info)
                    hostView.setAppWidget(widgetId, info)
                    val container = FrameLayout(this@MainActivity).apply {
                        layoutParams = FrameLayout.LayoutParams(
                            info.minWidth.coerceAtLeast(200),
                            info.minHeight.coerceAtLeast(200)
                        )
                        addView(hostView)
                    }
                    addedWidgetContainer.addView(container)
                }
            }
        }

        rootLayout.addView(addedWidgetContainer)
        rootLayout.addView(addWidgetButton)
        setContentView(rootLayout)
    }
}








package com.example.mynewwidget

import android.app.Activity
import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.graphics.Bitmap
import android.graphics.Canvas
import android.view.*
import android.widget.*
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog

object WidgetPickerBottomSheet {

    private val previewCache = mutableMapOf<ComponentName, Bitmap>()
    private val widgetIdCache = mutableMapOf<ComponentName, Int>()

    fun show(
        activity: Activity,
        appWidgetManager: AppWidgetManager,
        appWidgetHost: AppWidgetHost,
        onWidgetSelected: (AppWidgetProviderInfo, Int) -> Unit
    ) {
        val dialog = BottomSheetDialog(activity)
        val recyclerView = RecyclerView(activity).apply {
            layoutManager = GridLayoutManager(activity, 2)
        }

        val widgetProviders = appWidgetManager.installedProviders
        recyclerView.adapter = object : RecyclerView.Adapter<WidgetViewHolder>() {
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WidgetViewHolder {
                val layout = LinearLayout(parent.context).apply {
                    orientation = LinearLayout.VERTICAL
                    setPadding(24, 24, 24, 24)
                }
                return WidgetViewHolder(layout)
            }

            override fun onBindViewHolder(holder: WidgetViewHolder, position: Int) {
                val provider = widgetProviders[position]
                val previewBitmap = previewCache[provider.provider]

                val layout = holder.itemView as LinearLayout
                layout.removeAllViews()

                layout.addView(TextView(layout.context).apply {
                    text = provider.label
                    textSize = 14f
                    gravity = Gravity.CENTER_HORIZONTAL
                })

                if (previewBitmap != null) {
                    layout.addView(ImageView(layout.context).apply {
                        setImageBitmap(previewBitmap)
                        layoutParams = LinearLayout.LayoutParams(400, 400)
                        scaleType = ImageView.ScaleType.FIT_CENTER
                    })
                    layout.setOnClickListener {
                        val cachedId = widgetIdCache[provider.provider] ?: return@setOnClickListener
                        dialog.dismiss()
                        onWidgetSelected(provider, cachedId)
                    }
                    return
                }

                val widgetId = appWidgetHost.allocateAppWidgetId()
                if (!appWidgetManager.bindAppWidgetIdIfAllowed(widgetId, provider.provider)) return

                val hostView = appWidgetHost.createView(layout.context, widgetId, provider)
                hostView.setAppWidget(widgetId, provider)

                val bitmap = Bitmap.createBitmap(
                    400,
                    400,
                    Bitmap.Config.ARGB_8888
                )
                val canvas = Canvas(bitmap)
                hostView.measure(
                    View.MeasureSpec.makeMeasureSpec(400, View.MeasureSpec.EXACTLY),
                    View.MeasureSpec.makeMeasureSpec(400, View.MeasureSpec.EXACTLY)
                )
                hostView.layout(0, 0, 400, 400)
                hostView.draw(canvas)

                if (bitmap != null) {
                    previewCache[provider.provider] = bitmap
                    widgetIdCache[provider.provider] = widgetId

                    layout.addView(ImageView(layout.context).apply {
                        setImageBitmap(bitmap)
                        layoutParams = LinearLayout.LayoutParams(400, 400)
                        scaleType = ImageView.ScaleType.FIT_CENTER
                    })

                    layout.setOnClickListener {
                        dialog.dismiss()
                        onWidgetSelected(provider, widgetId)
                    }
                }
            }

            override fun getItemCount(): Int = widgetProviders.size
        }

        dialog.setContentView(recyclerView)
        dialog.show()
    }

    class WidgetViewHolder(view: View) : RecyclerView.ViewHolder(view)
}





