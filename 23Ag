package your.pkg.widgets

object WidgetContract {
    const val HOST_ID = 1024
    const val EXTRA_APPWIDGET_ID = "extra_appwidget_id"
}





your/pkg/widgets/WidgetHostSingleton.kt
package your.pkg.widgets

import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.content.Context
import android.view.ContextThemeWrapper

/**
 * Single host/manager tied to applicationContext to avoid leaking Activities.
 */
object WidgetHostSingleton {
    @Volatile private var hostRef: AppWidgetHost? = null
    @Volatile private var mgrRef: AppWidgetManager? = null

    fun host(appCtx: Context): AppWidgetHost =
        (hostRef ?: object : AppWidgetHost(appCtx.applicationContext, WidgetContract.HOST_ID) {
            override fun onCreateView(
                context: Context,
                appWidgetId: Int,
                appWidget: android.appwidget.AppWidgetProviderInfo
            ): AppWidgetHostView {
                // Force a stable framework theme; OEM skins sometimes break previews.
                val themed = ContextThemeWrapper(
                    context.applicationContext,
                    android.R.style.Theme_DeviceDefault
                )
                return AppWidgetHostView(themed)
            }
        }).also { hostRef = it }

    fun mgr(appCtx: Context): AppWidgetManager =
        (mgrRef ?: AppWidgetManager.getInstance(appCtx.applicationContext)).also { mgrRef = it }

    fun start(appCtx: Context) { host(appCtx).startListening() }
    fun stop() { hostRef?.stopListening() }
}











your/pkg/widgets/WidgetPickerBridgeFragment.kt

(Headless bridge that launches the picker and delivers the result directly to WidgetsLayout.)

package your.pkg.widgets

import android.content.Intent
import android.os.Bundle
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentManager
import java.lang.ref.WeakReference

class WidgetPickerBridgeFragment : Fragment() {

    companion object {
        private const val TAG = "WidgetPickerBridge"
        private var targetLayoutRef: WeakReference<WidgetsLayout>? = null

        fun get(fm: FragmentManager): WidgetPickerBridgeFragment {
            (fm.findFragmentByTag(TAG) as? WidgetPickerBridgeFragment)?.let { return it }
            val f = WidgetPickerBridgeFragment()
            fm.beginTransaction().add(f, TAG).commitNow()
            return f
        }

        fun launch(fm: FragmentManager, layout: WidgetsLayout) {
            targetLayoutRef = WeakReference(layout)
            get(fm).launcher.launch(Intent(layout.context, SmartWidgetPickerActivity::class.java))
        }
    }

    private lateinit var launcher: ActivityResultLauncher<Intent>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        retainInstance = true // good enough for a headless bridge
        launcher = registerForActivityResult(StartActivityForResult()) { res ->
            val layout = targetLayoutRef?.get()
            if (layout != null && res.resultCode == android.app.Activity.RESULT_OK && res.data != null) {
                layout.handlePickerResult(res.data!!)
            }
        }
    }
}




















import android.appwidget.AppWidgetHost
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.ViewGroup
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlin.math.max

class SmartWidgetPickerActivity : AppCompatActivity() {

    private lateinit var mgr: AppWidgetManager
    private lateinit var host: AppWidgetHost
    private lateinit var rv: RecyclerView

    private val allPreviewIds = mutableSetOf<Int>() // to cleanup onDestroy
    private var selectedId: Int? = null

    private var pendingBindRow: RowState? = null

    private val bindLauncher = registerForActivityResult(StartActivityForResult()) { res ->
        val row = pendingBindRow
        pendingBindRow = null
        if (row == null) { finishCanceled(); return@registerForActivityResult }

        if (res.resultCode == RESULT_OK) {
            row.bound = true
            maybeConfigureOrFinish(row.previewId)
        } else {
            safeDelete(row.previewId)
            finishCanceled()
        }
    }

    private val configLauncher = registerForActivityResult(StartActivityForResult()) { res ->
        val id = res.data?.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) ?: -1
        if (id != -1) finishWithOk(id) else finishCanceled()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        mgr  = WidgetHostSingleton.mgr(this)
        host = WidgetHostSingleton.host(this)

        rv = RecyclerView(this).apply {
            layoutManager = GridLayoutManager(this@SmartWidgetPickerActivity, 3)
            setHasFixedSize(true)
        }
        setContentView(rv)

        val providers = mgr.installedProviders
            .sortedBy { it.loadLabel(packageManager)?.toString() ?: it.provider.className }

        if (providers.isEmpty()) { Toast.makeText(this, "No widgets found", Toast.LENGTH_SHORT).show(); finish(); return }

        rv.adapter = PickerAdapter(providers)
    }

    override fun onStart() { super.onStart(); WidgetHostSingleton.start(applicationContext) }
    override fun onStop()  { super.onStop();  WidgetHostSingleton.stop() }

    override fun onDestroy() {
        super.onDestroy()
        val keep = selectedId
        allPreviewIds.filter { it != keep }.forEach { safeDelete(it) }
        allPreviewIds.clear()
    }

    private inner class PickerAdapter(private val providers: List<AppWidgetProviderInfo>)
        : RecyclerView.Adapter<VH>() {

        private var cellW = 0

        override fun onAttachedToRecyclerView(recyclerView: RecyclerView) {
            recyclerView.post {
                val span = (recyclerView.layoutManager as GridLayoutManager).spanCount
                cellW = recyclerView.width / max(1, span)
                notifyDataSetChanged()
            }
        }

        override fun getItemCount() = providers.size

        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): VH {
            val row = LinearLayout(this@SmartWidgetPickerActivity).apply {
                orientation = LinearLayout.VERTICAL
                setPadding(16,16,16,16)
                descendantFocusability = ViewGroup.FOCUS_BLOCK_DESCENDANTS
                layoutParams = ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
            }
            val title = TextView(this@SmartWidgetPickerActivity).apply {
                setPadding(0,0,0,8)
            }
            val holder = FrameLayout(this@SmartWidgetPickerActivity).apply {
                layoutParams = LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                )
            }
            row.addView(title); row.addView(holder)
            return VH(row, title, holder)
        }

        override fun onBindViewHolder(h: VH, pos: Int) {
            val info = providers[pos]
            h.title.text = info.loadLabel(packageManager) ?: info.provider.className

            // cleanup old preview
            h.rowState?.let { prev -> if (!prev.selected) safeDelete(prev.previewId) }
            h.rowState = null
            h.previewHolder.removeAllViews()

            // allocate preview id and attempt silent bind
            val previewId = host.allocateAppWidgetId()
            allPreviewIds += previewId
            val bound = try { mgr.bindAppWidgetIdIfAllowed(previewId, info.provider) } catch (_: Throwable) { false }

            val state = RowState(info, previewId, bound, selected = false)
            h.rowState = state

            // compute preview size & options
            val (cellWpx, cellHpx, opts) = computeOptions(info, h, cellW)

            if (bound) {
                mgr.updateAppWidgetOptions(previewId, opts)
                val hv = try {
                    host.createView(this@SmartWidgetPickerActivity, previewId, info).apply {
                        layoutParams = FrameLayout.LayoutParams(cellWpx, cellHpx)
                        setAppWidget(previewId, info)
                        updateAppWidgetOptions(opts)
                    }
                } catch (t: Throwable) { Log.w(TAG, "createView failed: ${info.provider}", t); null }

                if (hv != null && hv.childCount > 0) {
                    h.previewHolder.addView(hv)
                } else {
                    showStaticPreviewOrFallback(h.previewHolder, info, cellWpx, cellHpx)
                }
            } else {
                showStaticPreviewOrFallback(h.previewHolder, info, cellWpx, cellHpx)
            }

            // LABEL = SELECT
            h.title.isClickable = true
            h.title.isFocusable = true
            h.title.setOnClickListener {
                if (state.bound) {
                    state.selected = true
                    selectedId = state.previewId
                    maybeConfigureOrFinish(state.previewId)
                } else {
                    // request bind now
                    val id = host.allocateAppWidgetId()
                    allPreviewIds += id
                    state.previewId = id
                    pendingBindRow = state
                    val bind = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                    }
                    bindLauncher.launch(bind)
                }
            }
        }

        override fun onViewRecycled(h: VH) {
            h.rowState?.let { if (!it.selected) safeDelete(it.previewId) }
            h.rowState = null
            h.previewHolder.removeAllViews()
        }
    }

    private class VH(
        val row: LinearLayout,
        val title: TextView,
        val previewHolder: FrameLayout
    ) : RecyclerView.ViewHolder(row) {
        var rowState: RowState? = null
    }

    private data class RowState(
        val info: AppWidgetProviderInfo,
        var previewId: Int,
        var bound: Boolean,
        var selected: Boolean
    )

    // ---- helpers ----

    private fun computeOptions(
        info: AppWidgetProviderInfo,
        h: VH,
        cellW: Int
    ): Triple<Int, Int, Bundle> {
        val density = resources.displayMetrics.density
        val minWdp = if (info.minWidth  > 0) info.minWidth  else 110
        val minHdp = if (info.minHeight > 0) info.minHeight else 110
        val minWpx = (minWdp * density).toInt().coerceAtLeast(1)
        val minHpx = (minHdp * density).toInt().coerceAtLeast(1)

        val targetW = if (cellW > 0) cellW - h.row.paddingLeft - h.row.paddingRight else minWpx
        val scale   = if (minWpx > 0) targetW.toFloat() / minWpx else 1f
        val targetH = max(1, (minHpx * scale).toInt())

        val optWdp = (targetW / density).toInt().coerceAtLeast(1)
        val optHdp = (targetH / density).toInt().coerceAtLeast(1)

        val opts = Bundle().apply {
            putInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH,  optWdp)
            putInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT, optHdp)
            putInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH,  optWdp)
            putInt(AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT, optHdp)
            putInt(
                AppWidgetManager.OPTION_APPWIDGET_HOST_CATEGORY,
                AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN
            )
        }
        return Triple(targetW, targetH, opts)
    }

    private fun showStaticPreviewOrFallback(container: FrameLayout, info: AppWidgetProviderInfo, w: Int, h: Int) {
        val drawable = try { if (info.previewImage != 0) info.loadPreviewImage(this, info.previewImage) else null }
        catch (_: Throwable) { null }

        if (drawable != null) {
            container.addView(ImageView(this).apply {
                layoutParams = FrameLayout.LayoutParams(w, h)
                scaleType = ImageView.ScaleType.FIT_CENTER
                setImageDrawable(drawable)
            })
        } else {
            container.addView(TextView(this).apply {
                layoutParams = FrameLayout.LayoutParams(w, h)
                text = "Preview unavailable"
                gravity = android.view.Gravity.CENTER
            })
        }
    }

    private fun maybeConfigureOrFinish(id: Int) {
        val info = mgr.getAppWidgetInfo(id)
        val cfg: ComponentName? = info?.configure
        if (cfg == null) { finishWithOk(id); return }

        val ri = packageManager.resolveActivity(Intent().setComponent(cfg), 0)
        val exported = ri?.activityInfo?.exported == true
        val requiredPerm = ri?.activityInfo?.permission
        val permGranted = requiredPerm == null ||
            (Build.VERSION.SDK_INT < 23 || checkSelfPermission(requiredPerm) == PackageManager.PERMISSION_GRANTED)

        if (exported && permGranted) {
            try {
                configLauncher.launch(
                    Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                        component = cfg
                        putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                    }
                )
                return
            } catch (_: Throwable) { /* fall through */ }
        }
        finishWithOk(id)
    }

    private fun finishWithOk(id: Int) {
        selectedId = id
        setResult(RESULT_OK, Intent().putExtra(WidgetContract.EXTRA_APPWIDGET_ID, id))
        finish()
    }

    private fun finishCanceled() {
        setResult(RESULT_CANCELED); finish()
    }

    private fun safeDelete(id: Int) {
        try { host.deleteAppWidgetId(id) } catch (_: Throwable) {}
        allPreviewIds.remove(id)
    }

    companion object { private const val TAG = "SmartWidgetPicker" }
}
















import android.appwidget.AppWidgetHostView
import android.content.Context
import android.content.ContextWrapper
import android.content.Intent
import android.graphics.Rect
import android.view.*
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.FragmentActivity
import com.samsung.android.homemode.ui.interfaces.Page
import com.samsung.android.homemode.ui.pages.PageLayout

/** Return this from your PageLayoutFactory for Page.WidgetPage */
class WidgetsLayout(
    context: Context,
    page: Page
) : PageLayout(context, page) {

    // ---- PageLayout abstract requirements
    override fun getSwipeToSAParameter(): String = ""
    override fun getScreenIDSAParameter(): String = ""
    override fun getShowEventIDSAParameter(): String = ""
    override fun getContentLayout(): ViewGroup = canvas
    override fun getSettingLayout(): ViewGroup = FrameLayout(context)

    private val host = WidgetHostSingleton.host(context)
    private val mgr  = WidgetHostSingleton.mgr(context)

    private val canvas = FrameLayout(context)
    private val addBtn = Button(context).apply { text = "Add Widget" }
    private val deleteZone = ImageView(context).apply {
        setImageResource(android.R.drawable.ic_menu_delete)
        alpha = 0.85f
        visibility = View.GONE
        layoutParams = LayoutParams(400, 200, Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL)
    }

    init {
        addView(canvas, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))
        addView(addBtn, LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.TOP or Gravity.END))
        addView(deleteZone)
        addBtn.setOnClickListener { launchPicker() }
    }

    private fun launchPicker() {
        val act = findActivity(context) as? FragmentActivity
            ?: throw IllegalStateException("Host Activity must be a FragmentActivity/AppCompatActivity")
        WidgetPickerBridgeFragment.launch(act.supportFragmentManager, this)
    }

    /** Called by the bridge when picker returns RESULT_OK */
    fun handlePickerResult(data: Intent) {
        val id = data.getIntExtra(WidgetContract.EXTRA_APPWIDGET_ID, -1)
        if (id <= 0) return
        val info = mgr.getAppWidgetInfo(id) ?: return

        val hv: AppWidgetHostView = host.createView(context, id, info).apply {
            layoutParams = LayoutParams(
                info.minWidth.coerceAtLeast(400),
                info.minHeight.coerceAtLeast(400)
            )
            setAppWidget(id, info)
        }

        val box = FrameLayout(context).apply {
            layoutParams = LayoutParams(hv.layoutParams.width, hv.layoutParams.height)
            x = 320f; y = 160f
            addView(hv)
            setOnTouchListener(drag(this, id))
        }
        canvas.addView(box)
    }

    private fun drag(box: View, id: Int): View.OnTouchListener {
        var dx = 0f; var dy = 0f
        return View.OnTouchListener { _, e ->
            when (e.action) {
                MotionEvent.ACTION_DOWN -> { dx = box.x - e.rawX; dy = box.y - e.rawY; deleteZone.visibility = View.VISIBLE }
                MotionEvent.ACTION_MOVE -> { box.x = e.rawX + dx; box.y = e.rawY + dy }
                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                    deleteZone.visibility = View.GONE
                    if (overDelete(box)) {
                        (box.parent as ViewGroup).removeView(box)
                        WidgetHostSingleton.host(context).deleteAppWidgetId(id)
                    }
                }
            }
            true
        }
    }

    private fun overDelete(v: View): Boolean {
        val a = IntArray(2); v.getLocationOnScreen(a)
        val b = IntArray(2); deleteZone.getLocationOnScreen(b)
        val ar = Rect(a[0], a[1], a[0] + v.width, a[1] + v.height)
        val br = Rect(b[0], b[1], b[0] + deleteZone.width, b[1] + deleteZone.height)
        return Rect.intersects(ar, br)
    }

    private fun findActivity(ctx: Context): AppCompatActivity? =
        generateSequence(ctx) { (it as? ContextWrapper)?.baseContext }
            .filterIsInstance<AppCompatActivity>()
            .firstOrNull()
}



























override fun onStart() {
    super.onStart()
    WidgetHostSingleton.start(applicationContext)
}
override fun onStop() {
    super.onStop()
    WidgetHostSingleton.stop()
}
