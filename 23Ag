dependencies {
  implementation "androidx.appcompat:appcompat:1.7.0"
  implementation "androidx.recyclerview:recyclerview:1.3.2"
  implementation "androidx.activity:activity-ktx:1.9.2"
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.8.4"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1"
}








import android.appwidget.AppWidgetHost
import android.content.Context

object WidgetHost {
    const val HOST_ID = 0x534C // stable arbitrary int
    @Volatile private var host: AppWidgetHost? = null

    fun get(context: Context): AppWidgetHost =
        host ?: AppWidgetHost(context.applicationContext, HOST_ID).also { host = it }

    fun start(context: Context) = get(context).startListening()
    fun stop(context: Context)  = get(context).stopListening()
}













package your.pkg.widgets

import android.graphics.Bitmap
import android.util.LruCache

object PreviewCache {
    // ~32MB cache
    private val cache = object : LruCache<String, Bitmap>(32 * 1024 * 1024) {
        override fun sizeOf(key: String, value: Bitmap) = value.byteCount
    }
    fun get(key: String): Bitmap? = cache.get(key)
    fun put(key: String, bmp: Bitmap) { cache.put(key, bmp) }
}









package your.pkg.widgetpicker

import android.appwidget.AppWidgetProviderInfo
import android.content.Context
import android.graphics.Bitmap
import android.util.DisplayMetrics
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.coroutineScope
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import your.pkg.R
import your.pkg.widgets.PreviewCache

/**
 * Shows a grid of providers. Fast static previews (public API): previewImage → icon.
 * We keep it simple here (no live off-screen renders in the grid to avoid early prompts/jank).
 * On item click, we delegate to the page controller to actually bind and attach the widget.
 */
class WidgetProviderAdapter(
    private val context: Context,
    private val lifecycleOwner: LifecycleOwner,
    private val providers: List<AppWidgetProviderInfo>,
    private val onClick: (AppWidgetProviderInfo) -> Unit
) : RecyclerView.Adapter<WidgetProviderAdapter.Holder>() {

    private val dm: DisplayMetrics = context.resources.displayMetrics

    inner class Holder(v: View) : RecyclerView.ViewHolder(v) {
        val icon: ImageView = v.findViewById(R.id.icon)
        val title: TextView = v.findViewById(R.id.title)
        var job: Job? = null
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Holder {
        val v = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_widget_provider, parent, false)
        return Holder(v)
    }

    override fun onBindViewHolder(h: Holder, position: Int) {
        val info = providers[position]
        h.title.text = info.loadLabel(context.packageManager)
        h.itemView.setOnClickListener { onClick(info) }

        // cache key per provider
        val key = info.provider.flattenToShortString()
        PreviewCache.get(key)?.let { h.icon.setImageBitmap(it); return }

        // Load static preview → fallback icon (off main thread)
        h.icon.setImageDrawable(null)
        h.job?.cancel()
        h.job = lifecycleOwner.lifecycle.coroutineScope.launch {
            val bmp: Bitmap? = withContext(Dispatchers.Default) {
                val d = info.loadPreviewImage(context, dm.densityDpi)
                    ?: info.loadIcon(context, dm.densityDpi)
                    ?: return@withContext null

                val w = (d.intrinsicWidth.takeIf { it > 0 } ?: (96 * dm.density).toInt())
                val hgt = (d.intrinsicHeight.takeIf { it > 0 } ?: (96 * dm.density).toInt())
                android.graphics.Bitmap.createBitmap(w, hgt, android.graphics.Bitmap.Config.ARGB_8888).also {
                    val c = android.graphics.Canvas(it)
                    d.setBounds(0, 0, w, hgt)
                    d.draw(c)
                }
            }
            if (bmp != null && lifecycleOwner.lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) {
                PreviewCache.put(key, bmp)
                h.icon.setImageBitmap(bmp)
            }
        }
    }

    override fun onViewRecycled(holder: Holder) {
        holder.job?.cancel()
        holder.job = null
        super.onViewRecycled(holder)
    }

    override fun getItemCount(): Int = providers.size
}












package your.pkg.ui.pages

import android.annotation.SuppressLint
import android.app.Activity
import android.appwidget.AppWidgetHostView
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProviderInfo
import android.content.ComponentName
import android.content.Context
import android.content.ContextWrapper
import android.content.Intent
import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import androidx.activity.ComponentActivity
import androidx.activity.result.ActivityResult
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import your.pkg.R
import your.pkg.widgets.WidgetHost
import your.pkg.widgetpicker.WidgetProviderAdapter

// If you already have these base types, keep using them. Otherwise these stubs compile.
interface Page
abstract class PageLayout(ctx: Context, @Suppress("unused") val page: Page) : FrameLayout(ctx) {
    open fun getContentLayout(): ViewGroup = this
    open fun getSettingLayout(): ViewGroup = this
    open fun getSwipeToSAParameter(): String = ""
    open fun getScreenIDSAParameter(): String = ""
    open fun getShowEventIDSAParameter(): String = ""
}

/**
 * This class owns the full "widget picker → bind → (configure?) → attach" flow.
 * Clicking a provider in the grid WILL add the widget to the container.
 */
@SuppressLint("ViewConstructor")
class WidgetsPageLayout(
    context: Context,
    page: Page
) : PageLayout(context, page) {

    private val awm = AppWidgetManager.getInstance(context)
    private val host = WidgetHost.get(context)

    private lateinit var grid: RecyclerView
    private lateinit var container: FrameLayout

    private val activity: ComponentActivity by lazy { requireActivity(context) }

    private var pendingId = AppWidgetManager.INVALID_APPWIDGET_ID
    private var pendingInfo: AppWidgetProviderInfo? = null

    private val bindLauncher: ActivityResultLauncher<Intent> =
        activity.activityResultRegistry.register(
            "${hashCode()}_bind", ActivityResultContracts.StartActivityForResult()
        ) { r: ActivityResult ->
            if (r.resultCode == Activity.RESULT_OK) launchConfigureIfNeeded() else cleanupId()
        }

    private val configLauncher: ActivityResultLauncher<Intent> =
        activity.activityResultRegistry.register(
            "${hashCode()}_cfg", ActivityResultContracts.StartActivityForResult()
        ) { r: ActivityResult ->
            if (r.resultCode == Activity.RESULT_OK) attachHostView() else cleanupId()
        }

    init {
        inflate(context, R.layout.page_widgets, this)
        grid = findViewById(R.id.widget_list)
        container = findViewById(R.id.widget_container)

        grid.layoutManager = GridLayoutManager(context, 3)
        grid.adapter = WidgetProviderAdapter(
            context = context,
            lifecycleOwner = activity,
            providers = awm.getInstalledProvidersForProfile(android.os.Process.myUserHandle()),
            onClick = { info -> onProviderChosen(info) }
        )

        // start listening while the page is visible
        WidgetHost.start(context)
    }

    override fun onAttachedToWindow() {
        super.onAttachedToWindow()
        WidgetHost.start(context)
    }

    override fun onDetachedFromWindow() {
        super.onDetachedFromWindow()
        WidgetHost.stop(context)
        runCatching { bindLauncher.unregister() }
        runCatching { configLauncher.unregister() }
    }

    // ---------- User clicked a widget in the grid ----------
    private fun onProviderChosen(info: AppWidgetProviderInfo) {
        pendingInfo = info
        val id = ensureId()
        val profile = info.profile ?: android.os.Process.myUserHandle()

        val allowed = awm.bindAppWidgetIdIfAllowed(id, profile, info.provider, null)
        if (allowed) {
            launchConfigureIfNeeded()
        } else {
            val i = Intent(AppWidgetManager.ACTION_APPWIDGET_BIND).apply {
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER, info.provider)
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_PROVIDER_PROFILE, profile)
            }
            bindLauncher.launch(i)
        }
    }

    private fun launchConfigureIfNeeded() {
        val info = pendingInfo ?: return cleanupId()
        if (info.configure != null) {
            val i = Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE).apply {
                component = info.configure as ComponentName
                putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, pendingId)
            }
            configLauncher.launch(i)
        } else {
            attachHostView()
        }
    }

    private fun attachHostView() {
        val info = awm.getAppWidgetInfo(pendingId) ?: return cleanupId()
        val hv: AppWidgetHostView = host.createView(context, pendingId, info)
        hv.setAppWidget(pendingId, info)

        // Show the actual widget; hide grid (you can keep both if you want multi-add)
        grid.visibility = View.GONE
        container.visibility = View.VISIBLE
        container.removeAllViews()
        container.addView(
            hv,
            LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
        )

        // Keep the id for runtime (persist if you need restore across process death)
        pendingInfo = null
    }

    private fun ensureId(): Int {
        if (pendingId == AppWidgetManager.INVALID_APPWIDGET_ID) {
            pendingId = host.allocateAppWidgetId()
        }
        return pendingId
    }

    private fun cleanupId() {
        if (pendingId != AppWidgetManager.INVALID_APPWIDGET_ID) {
            host.deleteAppWidgetId(pendingId)
        }
        pendingId = AppWidgetManager.INVALID_APPWIDGET_ID
        pendingInfo = null
    }

    private fun requireActivity(ctx: Context): ComponentActivity {
        var c = ctx
        while (c is ContextWrapper) {
            if (c is ComponentActivity) return c
            c = c.baseContext
        }
        throw IllegalStateException("WidgetsPageLayout must be hosted in a ComponentActivity/AppCompatActivity")
    }

    // ---- PageLayout integration points (no-ops, adjust if your base uses them) ----
    override fun getContentLayout(): ViewGroup = this
    override fun getSettingLayout(): ViewGroup = this
    override fun getSwipeToSAParameter(): String = ""
    override fun getScreenIDSAParameter(): String = ""
    override fun getShowEventIDSAParameter(): String = ""
}












WidgetsPageLayout(context, page)



















res/layout/page_widgets.xml



<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/page_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/widget_list"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="12dp"
        android:clipToPadding="false" />

    <FrameLayout
        android:id="@+id/widget_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:visibility="gone" />
</FrameLayout>










res/layout/item_widget_provider.xml



<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="88dp"
    android:padding="12dp"
    android:gravity="center_vertical">

    <ImageView
        android:id="@+id/icon"
        android:layout_width="48dp"
        android:layout_height="48dp"
        android:contentDescription="@null" />

    <TextView
        android:id="@+id/title"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="12dp"
        android:layout_weight="1"
        android:maxLines="1"
        android:ellipsize="end"
        android:textSize="16sp" />
</LinearLayout>






